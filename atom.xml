<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ReLive27的博客</title>
  
  
  <link href="https://relive27.github.io/atom.xml" rel="self"/>
  
  <link href="https://relive27.github.io/"/>
  <updated>2022-07-25T12:57:12.824Z</updated>
  <id>https://relive27.github.io/</id>
  
  <author>
    <name>ReLive27</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Security OAuth2登录</title>
    <link href="https://relive27.github.io/2022/07/25/oauth2-login/"/>
    <id>https://relive27.github.io/2022/07/25/oauth2-login/</id>
    <published>2022-07-25T12:01:01.000Z</published>
    <updated>2022-07-25T12:57:12.824Z</updated>
    
    <content type="html"><![CDATA[<!-- spring security oauth2 login --><html><head></head><body><span id="more"></span><h2 id="Spring-Security-OAuth2登录"><a href="#Spring-Security-OAuth2登录" class="headerlink" title="Spring Security OAuth2登录"></a>Spring Security OAuth2登录</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>OAuth 2.0 不是身份认证协议</strong>。</p><p>什么是身份认证？<strong>身份认证</strong>是解决“你是谁？”的问题。身份认证会告诉应用当前用户是谁以及是否在使用此应用。实际中可能还会告诉你用户的名称，邮箱，手机号等。</p><p>如果对 OAuth 2.0 进行扩展，使得授权服务器和受保护资源发出的信息能够传达与用户以及他们的身份认证上下文有关的信息，我们就可以为客户端提供用于用户安全登录的所有信息。这种基于OAuth 2.0授权协议而构建的身份认证方式主要优点：</p><ul><li>用户在授权服务器上执行身份认证， 最终用户的原始凭据不会通过 OAuth 2.0 协议传送到客户端应用。</li><li>允许用户在运行时执行同意决策。</li><li>用户还可以将其他受保护 API 与他的身份信息的访问权限一起授权出去。通过一个调用，应用就可以知道用户是否已登录，如何称呼用户，用户的手机号，邮箱等。</li></ul><p>本文我们将通过OAuth 2.0 授权码模式安全的传递授权服务用户信息，并登录到客户端应用。</p><p>本文您将学到：</p><ul><li><p>搭建基本的授权服务和客户端服务</p></li><li><p>自定义授权服务器访问令牌，添加角色信息</p></li><li><p>自定义授权服务器用户信息端点</p></li><li><p>客户端服务使用<code>GrantedAuthoritiesMapper</code>做权限映射</p></li><li><p>客户端服务自定义OAuth2UserService实现解析多层Json数据</p></li></ul><h3 id="OAuth2授权服务器"><a href="#OAuth2授权服务器" class="headerlink" title="OAuth2授权服务器"></a>OAuth2授权服务器</h3><p>本节我们将使用<a href="https://spring.io/projects/spring-authorization-server">Spring Authorization Server</a>搭建一个授权服务器。除此之外我们还将会自定义access_token和自定义用户信息端点。</p><h4 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h4><figure class="highlight xml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-oauth2-authorization-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>首先通过application.yml配置服务端口8080:</p><figure class="highlight yaml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">server:</span></span><br><span class="line">  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span></span><br></pre></td></tr></tbody></table></figure><br><p>接下来我们将创建<code>OAuth2ServerConfig</code>配置类，定义OAuth2 授权服务所需特定Bean。首先我们注册一个OAuth2客户端:</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-keyword">public</span> RegisteredClientRepository <span class="title function_">registeredClientRepository</span><span class="hljs-params">()</span> {</span><br><span class="line">  <span class="hljs-type">RegisteredClient</span> <span class="hljs-variable">registeredClient</span> <span class="hljs-operator">=</span> RegisteredClient.withId(UUID.randomUUID().toString())</span><br><span class="line">    .clientId(<span class="hljs-string">"relive-client"</span>)</span><br><span class="line">    .clientSecret(<span class="hljs-string">"{noop}relive-client"</span>)</span><br><span class="line">    .clientAuthenticationMethods(s -&gt; {</span><br><span class="line">      s.add(ClientAuthenticationMethod.CLIENT_SECRET_POST);</span><br><span class="line">      s.add(ClientAuthenticationMethod.CLIENT_SECRET_BASIC);</span><br><span class="line">    })</span><br><span class="line">    .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)</span><br><span class="line">    .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)</span><br><span class="line">    .redirectUri(<span class="hljs-string">"http://127.0.0.1:8070/login/oauth2/code/messaging-client-authorization-code"</span>)</span><br><span class="line">    .scope(OidcScopes.PROFILE)</span><br><span class="line">    .clientSettings(ClientSettings.builder()</span><br><span class="line">                    .requireAuthorizationConsent(<span class="hljs-literal">true</span>)</span><br><span class="line">                    .requireProofKey(<span class="hljs-literal">false</span>)</span><br><span class="line">                    .build())</span><br><span class="line">    .tokenSettings(TokenSettings.builder()</span><br><span class="line">                   .accessTokenFormat(OAuth2TokenFormat.SELF_CONTAINED) </span><br><span class="line">                   .idTokenSignatureAlgorithm(SignatureAlgorithm.RS256)/</span><br><span class="line">                   .accessTokenTimeToLive(Duration.ofSeconds(<span class="hljs-number">30</span> * <span class="hljs-number">60</span>))</span><br><span class="line">                   .refreshTokenTimeToLive(Duration.ofSeconds(<span class="hljs-number">60</span> * <span class="hljs-number">60</span>))</span><br><span class="line">                   .reuseRefreshTokens(<span class="hljs-literal">true</span>)</span><br><span class="line">                   .build())</span><br><span class="line">    .build();</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">InMemoryRegisteredClientRepository</span>(registeredClient);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以上将OAuth2客户端存储在内存中，如果您需要使用数据库持久化，请参考文章<a href="https://relive27.github.io/2022/06/26/spring-security-oauth2-jwt/">将JWT与Spring Security OAuth2结合使用</a>。指定OAuth2客户端信息如下：</p><ul><li><strong>clientId</strong>: relive-client</li><li><strong>clientSecret</strong>: relive-client</li><li><strong>redirectUri</strong>: <a href="http://127.0.0.1:8070/login/oauth2/code/messaging-client-authorization-code">http://127.0.0.1:8070/login/oauth2/code/messaging-client-authorization-code</a></li><li><strong>scope</strong>: profile</li></ul><p>接下来让我们配置OAuth2授权服务其他默认配置，并对未认证的授权请求重定向到登录页面：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="hljs-keyword">public</span> SecurityFilterChain <span class="title function_">authorizationServerSecurityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception {</span><br><span class="line">  OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> http</span><br><span class="line">    .exceptionHandling(exceptions -&gt; exceptions.</span><br><span class="line">                       authenticationEntryPoint(<span class="hljs-keyword">new</span> <span class="title class_">LoginUrlAuthenticationEntryPoint</span>(<span class="hljs-string">"/login"</span>)))</span><br><span class="line">    .build();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><p>授权服务器token令牌格式使用<a href="https://datatracker.ietf.org/doc/html/rfc7519">JWT RFC 7519</a>，所以我们需要用于令牌的签名密钥，让我们生成一个RSA密钥：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-keyword">public</span> JWKSource&lt;SecurityContext&gt; <span class="title function_">jwkSource</span><span class="hljs-params">()</span> {</span><br><span class="line">  <span class="hljs-type">RSAKey</span> <span class="hljs-variable">rsaKey</span> <span class="hljs-operator">=</span> Jwks.generateRsa();</span><br><span class="line">  <span class="hljs-type">JWKSet</span> <span class="hljs-variable">jwkSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">JWKSet</span>(rsaKey);</span><br><span class="line">  <span class="hljs-keyword">return</span> (jwkSelector, securityContext) -&gt; jwkSelector.select(jwkSet);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="title class_">Jwks</span> {</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">private</span> <span class="title function_">Jwks</span><span class="hljs-params">()</span> {</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RSAKey <span class="title function_">generateRsa</span><span class="hljs-params">()</span> {</span><br><span class="line">    <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> KeyGeneratorUtils.generateRsaKey();</span><br><span class="line">    <span class="hljs-type">RSAPublicKey</span> <span class="hljs-variable">publicKey</span> <span class="hljs-operator">=</span> (RSAPublicKey) keyPair.getPublic();</span><br><span class="line">    <span class="hljs-type">RSAPrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> (RSAPrivateKey) keyPair.getPrivate();</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">RSAKey</span>.Builder(publicKey)</span><br><span class="line">      .privateKey(privateKey)</span><br><span class="line">      .keyID(UUID.randomUUID().toString())</span><br><span class="line">      .build();</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="title class_">KeyGeneratorUtils</span> {</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">private</span> <span class="title function_">KeyGeneratorUtils</span><span class="hljs-params">()</span> {</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">static</span> KeyPair <span class="title function_">generateRsaKey</span><span class="hljs-params">()</span> {</span><br><span class="line">    KeyPair keyPair;</span><br><span class="line">    <span class="hljs-keyword">try</span> {</span><br><span class="line">      <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">"RSA"</span>);</span><br><span class="line">      keyPairGenerator.initialize(<span class="hljs-number">2048</span>);</span><br><span class="line">      keyPair = keyPairGenerator.generateKeyPair();</span><br><span class="line">    } <span class="hljs-keyword">catch</span> (Exception ex) {</span><br><span class="line">      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> keyPair;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><p>接下来我们将自定义access_token 访问令牌，并在令牌中添加角色信息：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">AccessTokenCustomizerConfig</span> {</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-keyword">public</span> OAuth2TokenCustomizer&lt;JwtEncodingContext&gt; <span class="title function_">tokenCustomizer</span><span class="hljs-params">()</span> {</span><br><span class="line">        <span class="hljs-keyword">return</span> (context) -&gt; {</span><br><span class="line">            <span class="hljs-keyword">if</span> (OAuth2TokenType.ACCESS_TOKEN.equals(context.getTokenType())) {</span><br><span class="line">                context.getClaims().claims(claim -&gt; {</span><br><span class="line">                    claim.put(<span class="hljs-string">"role"</span>, context.getPrincipal().getAuthorities().stream()</span><br><span class="line">                            .map(GrantedAuthority::getAuthority).collect(Collectors.toSet()));</span><br><span class="line">                });</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到Spring Security为我们提供了<em>OAuth2TokenCustomizer</em>用于扩展令牌信息，我们从<em>OAuth2TokenContext</em>获取到当前用户信息，并从中提取Authorities权限信息添加到JWT的claim。</p><br><p>下面我们将创建Spring Security配置类，配置授权服务基本的认证能力。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">DefaultSecurityConfig</span> {</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="title function_">defaultSecurityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception {</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="hljs-string">"/userInfo"</span>)</span><br><span class="line">                .access(<span class="hljs-string">"hasAnyAuthority('SCOPE_profile')"</span>)</span><br><span class="line">                .mvcMatchers(<span class="hljs-string">"/userInfo"</span>)</span><br><span class="line">                .access(<span class="hljs-string">"hasAuthority('SCOPE_profile')"</span>)</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin(Customizer.withDefaults())</span><br><span class="line">                .oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);</span><br><span class="line">        <span class="hljs-keyword">return</span> http.build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-keyword">public</span> JwtDecoder <span class="title function_">jwtDecoder</span><span class="hljs-params">(JWKSource&lt;SecurityContext&gt; jwkSource)</span> {</span><br><span class="line">        <span class="hljs-keyword">return</span> OAuth2AuthorizationServerConfiguration.jwtDecoder(jwkSource);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-keyword">public</span> UserDetailsService <span class="title function_">users</span><span class="hljs-params">()</span> {</span><br><span class="line">        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> User.withDefaultPasswordEncoder()</span><br><span class="line">                .username(<span class="hljs-string">"admin"</span>)</span><br><span class="line">                .password(<span class="hljs-string">"password"</span>)</span><br><span class="line">                .roles(<span class="hljs-string">"ADMIN"</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>(user);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上述配置类中，我们做了以下几件事。1.启用Form认证方式；2.配置登录用户名密码；3.使用<code>oauth2ResourceServer()</code>配置JWT验证，并声明<code>JwtDecoder</code>；4.保护/userInfo端点需要profile权限进行访问。</p><br><p>此时我们还需要创建Controller类，用于提供给OAuth2客户端服务获取用户信息：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">UserInfoController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@PostMapping("/userInfo")</span></span><br><span class="line">    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getUserInfo</span><span class="hljs-params">(<span class="hljs-meta">@AuthenticationPrincipal</span> Jwt jwt)</span> {</span><br><span class="line">        <span class="hljs-keyword">return</span> Collections.singletonMap(<span class="hljs-string">"data"</span>, jwt.getClaims());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们将用户信息使用以下JSON格式返回：</p><figure class="highlight json hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-punctuation">{</span></span><br><span class="line">  <span class="hljs-attr">"data"</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span></span><br><span class="line">    <span class="hljs-attr">"sub"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"admin"</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="hljs-punctuation">}</span></span><br><span class="line"><span class="hljs-punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="OAuth2客户端服务"><a href="#OAuth2客户端服务" class="headerlink" title="OAuth2客户端服务"></a>OAuth2客户端服务</h3><p>本节将使用Spring Security配置OAuth2客户端登录；并且我们将使用<code>GrantedAuthoritiesMapper</code>映射权限信息；还将通过自定义实现<code>OAuth2UserService</code>替换原有<code>DefaultOAuth2UserService</code>，用于解析多层JSON 用户信息数据。</p><h4 id="maven-1"><a href="#maven-1" class="headerlink" title="maven"></a>maven</h4><figure class="highlight xml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  </span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  </span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>首先我们指定客户端服务端口号8070,并配置OAuth2客户端相关信息：</p><figure class="highlight yaml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">server:</span></span><br><span class="line">  <span class="hljs-attr">port:</span> <span class="hljs-number">8070</span></span><br><span class="line">  <span class="hljs-attr">servlet:</span></span><br><span class="line">    <span class="hljs-attr">session:</span></span><br><span class="line">      <span class="hljs-attr">cookie:</span></span><br><span class="line">        <span class="hljs-attr">name:</span> <span class="hljs-string">CLIENT-SESSION</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-attr">spring:</span></span><br><span class="line">  <span class="hljs-attr">security:</span></span><br><span class="line">    <span class="hljs-attr">oauth2:</span></span><br><span class="line">      <span class="hljs-attr">client:</span></span><br><span class="line">        <span class="hljs-attr">registration:</span></span><br><span class="line">          <span class="hljs-attr">messaging-client-authorization-code:</span></span><br><span class="line">            <span class="hljs-attr">provider:</span> <span class="hljs-string">client-provider</span></span><br><span class="line">            <span class="hljs-attr">client-id:</span> <span class="hljs-string">relive-client</span></span><br><span class="line">            <span class="hljs-attr">client-secret:</span> <span class="hljs-string">relive-client</span></span><br><span class="line">            <span class="hljs-attr">authorization-grant-type:</span> <span class="hljs-string">authorization_code</span></span><br><span class="line">            <span class="hljs-attr">redirect-uri:</span> <span class="hljs-string">"{baseUrl}/login/oauth2/code/{registrationId}"</span></span><br><span class="line">            <span class="hljs-attr">scope:</span> <span class="hljs-string">profile</span></span><br><span class="line">            <span class="hljs-attr">client-name:</span> <span class="hljs-string">messaging-client-authorization-code</span></span><br><span class="line">        <span class="hljs-attr">provider:</span></span><br><span class="line">          <span class="hljs-attr">client-provider:</span></span><br><span class="line">            <span class="hljs-attr">authorization-uri:</span> <span class="hljs-string">http://127.0.0.1:8080/oauth2/authorize</span></span><br><span class="line">            <span class="hljs-attr">token-uri:</span> <span class="hljs-string">http://127.0.0.1:8080/oauth2/token</span></span><br><span class="line">            <span class="hljs-attr">user-info-uri:</span> <span class="hljs-string">http://127.0.0.1:8080/userInfo</span></span><br><span class="line">            <span class="hljs-attr">user-name-attribute:</span> <span class="hljs-string">data.sub</span></span><br><span class="line">            <span class="hljs-attr">user-info-authentication-method:</span> <span class="hljs-string">form</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><br><p>接下来配置Spring Security相关Bean，首先我们先启用Form表单认证和OAuth2登录能力：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line">SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception {</span><br><span class="line">  http.authorizeHttpRequests()</span><br><span class="line">    .anyRequest()</span><br><span class="line">    .authenticated()</span><br><span class="line">    .and()</span><br><span class="line">    .formLogin(from -&gt; {</span><br><span class="line">      from.defaultSuccessUrl(<span class="hljs-string">"/home"</span>);</span><br><span class="line">    })</span><br><span class="line">    .oauth2Login(Customizer.withDefaults())</span><br><span class="line">    .csrf().disable();</span><br><span class="line">  <span class="hljs-keyword">return</span> http.build();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里我们指定认证成功后重定向到/home路径下。</p><br><p>下面我们使用<code>GrantedAuthoritiesMapper</code>映射用户权限：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line">GrantedAuthoritiesMapper <span class="title function_">userAuthoritiesMapper</span><span class="hljs-params">()</span> {</span><br><span class="line">  <span class="hljs-comment">//角色映射关系，授权服务器ADMIN角色对应客户端OPERATION角色</span></span><br><span class="line">  Map&lt;String, String&gt; roleMapping = <span class="hljs-keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  roleMapping.put(<span class="hljs-string">"ROLE_ADMIN"</span>, <span class="hljs-string">"ROLE_OPERATION"</span>);</span><br><span class="line">  <span class="hljs-keyword">return</span> (authorities) -&gt; {</span><br><span class="line">    Set&lt;GrantedAuthority&gt; mappedAuthorities = <span class="hljs-keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    authorities.forEach(authority -&gt; {</span><br><span class="line">      <span class="hljs-keyword">if</span> (OAuth2UserAuthority.class.isInstance(authority)) {</span><br><span class="line">        <span class="hljs-type">OAuth2UserAuthority</span> <span class="hljs-variable">oauth2UserAuthority</span> <span class="hljs-operator">=</span> (OAuth2UserAuthority) authority;</span><br><span class="line">        Map&lt;String, Object&gt; userAttributes = oauth2UserAuthority.getAttributes();</span><br><span class="line">        List&lt;String&gt; role = (List) userAttributes.get(<span class="hljs-string">"role"</span>);</span><br><span class="line">        role.stream().map(roleMapping::get)</span><br><span class="line">          .filter(StringUtils::hasText)</span><br><span class="line">          .map(SimpleGrantedAuthority::<span class="hljs-keyword">new</span>)</span><br><span class="line">          .forEach(mappedAuthorities::add);</span><br><span class="line">      }</span><br><span class="line">    });</span><br><span class="line">    <span class="hljs-keyword">return</span> mappedAuthorities;</span><br><span class="line">  };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述将OAuth2授权服务<strong>ADMIN</strong>角色映射为客户端角色<strong>OPERATION</strong>。当然你同样可以扩展为数据库操作，那么需要你维护授权服务角色与客户端服务角色映射表，这里将不展开。</p><p><code>GrantedAuthoritiesMapper</code>作为权限映射器在OAuth2登录，CAS登录，SAML和LDAP多方使用。</p><p><code>GrantedAuthoritiesMapper</code>在<em>OAuth2LoginAuthenticationProvider</em>中源码如下：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-keyword">public</span> Authentication <span class="title function_">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException {</span><br><span class="line">    <span class="hljs-type">OAuth2LoginAuthenticationToken</span> <span class="hljs-variable">loginAuthenticationToken</span> <span class="hljs-operator">=</span> (OAuth2LoginAuthenticationToken) authentication;</span><br><span class="line">    <span class="hljs-comment">//...省略部分源码</span></span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">/* map authorities */</span></span><br><span class="line">    Collection&lt;? <span class="hljs-keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; mappedAuthorities = <span class="hljs-built_in">this</span>.authoritiesMapper</span><br><span class="line">      .mapAuthorities(oauth2User.getAuthorities());</span><br><span class="line">    <span class="hljs-comment">/* map authorities */</span></span><br><span class="line">  </span><br><span class="line">    <span class="hljs-type">OAuth2LoginAuthenticationToken</span> <span class="hljs-variable">authenticationResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">OAuth2LoginAuthenticationToken</span>(</span><br><span class="line">      loginAuthenticationToken.getClientRegistration(), loginAuthenticationToken.getAuthorizationExchange(),</span><br><span class="line">      oauth2User, mappedAuthorities, accessToken, authorizationCodeAuthenticationToken.getRefreshToken());</span><br><span class="line">    authenticationResult.setDetails(loginAuthenticationToken.getDetails());</span><br><span class="line">    <span class="hljs-keyword">return</span> authenticationResult;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>所以当我们自定义实现<code>GrantedAuthoritiesMapper</code>后，OAuth2 登录成功后将映射后的权限信息存储在认证信息Authentication的子类OAuth2LoginAuthenticationToken中，在后续流程中需要时获取。</p><br><p>接下来将实现OAuth2UserService自定义DefaultJsonOAuth2UserService类。当然Spring Security提供了DefaultOAuth2UserService，那么为什么不使用它呢？原因很简单，首先让我们回顾授权服务器返回用户信息格式：</p><figure class="highlight json hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-punctuation">{</span></span><br><span class="line">  <span class="hljs-attr">"data"</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span></span><br><span class="line">    <span class="hljs-attr">"sub"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"admin"</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="hljs-punctuation">}</span></span><br><span class="line"><span class="hljs-punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>不错，用户信息嵌套data字段中，而DefaultOAuth2UserService处理用户信息响应时并没有处理这个格式，以下是DefaultOAuth2UserService源码：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> OAuth2User <span class="title function_">loadUser</span><span class="hljs-params">(OAuth2UserRequest userRequest)</span> <span class="hljs-keyword">throws</span> OAuth2AuthenticationException {</span><br><span class="line">        Assert.notNull(userRequest, <span class="hljs-string">"userRequest cannot be null"</span>);</span><br><span class="line">        <span class="hljs-keyword">if</span> (!StringUtils.hasText(userRequest.getClientRegistration().getProviderDetails().getUserInfoEndpoint().getUri())) {</span><br><span class="line">            <span class="hljs-type">OAuth2Error</span> <span class="hljs-variable">oauth2Error</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">OAuth2Error</span>(<span class="hljs-string">"missing_user_info_uri"</span>, <span class="hljs-string">"Missing required UserInfo Uri in UserInfoEndpoint for Client Registration: "</span> + userRequest.getClientRegistration().getRegistrationId(), (String)<span class="hljs-literal">null</span>);</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="title class_">OAuth2AuthenticationException</span>(oauth2Error, oauth2Error.toString());</span><br><span class="line">        } <span class="hljs-keyword">else</span> {</span><br><span class="line">            <span class="hljs-type">String</span> <span class="hljs-variable">userNameAttributeName</span> <span class="hljs-operator">=</span> userRequest.getClientRegistration().getProviderDetails().getUserInfoEndpoint().getUserNameAttributeName();</span><br><span class="line">            <span class="hljs-keyword">if</span> (!StringUtils.hasText(userNameAttributeName)) {</span><br><span class="line">                <span class="hljs-type">OAuth2Error</span> <span class="hljs-variable">oauth2Error</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">OAuth2Error</span>(<span class="hljs-string">"missing_user_name_attribute"</span>, <span class="hljs-string">"Missing required \"user name\" attribute name in UserInfoEndpoint for Client Registration: "</span> + userRequest.getClientRegistration().getRegistrationId(), (String)<span class="hljs-literal">null</span>);</span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="title class_">OAuth2AuthenticationException</span>(oauth2Error, oauth2Error.toString());</span><br><span class="line">            } <span class="hljs-keyword">else</span> {</span><br><span class="line">                RequestEntity&lt;?&gt; request = (RequestEntity)<span class="hljs-built_in">this</span>.requestEntityConverter.convert(userRequest);</span><br><span class="line">               <span class="hljs-comment">/* 获取用户信息 */</span>  </span><br><span class="line">              ResponseEntity&lt;Map&lt;String, Object&gt;&gt; response = <span class="hljs-built_in">this</span>.getResponse(userRequest, request);</span><br><span class="line">                <span class="hljs-comment">//在这里直接获取响应体信息，默认此userAttributes包含相关用户信息，并没有解析多层JSON</span></span><br><span class="line">                Map&lt;String, Object&gt; userAttributes = (Map)response.getBody();</span><br><span class="line">               <span class="hljs-comment">/* 获取用户信息 */</span>  </span><br><span class="line">                Set&lt;GrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line">                authorities.add(<span class="hljs-keyword">new</span> <span class="title class_">OAuth2UserAuthority</span>(userAttributes));</span><br><span class="line">                <span class="hljs-type">OAuth2AccessToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> userRequest.getAccessToken();</span><br><span class="line">                <span class="hljs-type">Iterator</span> <span class="hljs-variable">var8</span> <span class="hljs-operator">=</span> token.getScopes().iterator();</span><br><span class="line"></span><br><span class="line">                <span class="hljs-keyword">while</span>(var8.hasNext()) {</span><br><span class="line">                    <span class="hljs-type">String</span> <span class="hljs-variable">authority</span> <span class="hljs-operator">=</span> (String)var8.next();</span><br><span class="line">                    authorities.add(<span class="hljs-keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="hljs-string">"SCOPE_"</span> + authority));</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">DefaultOAuth2User</span>(authorities, userAttributes, userNameAttributeName);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>而最后创建DefaultOAuth2User时，你可能会收到以下错误信息</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Missing attribute 'sub' in attributes</span><br></pre></td></tr></tbody></table></figure><p>通过上面源码，Spring Security 所希望返回的用户信息格式：</p><figure class="highlight json hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-punctuation">{</span></span><br><span class="line">  <span class="hljs-attr">"sub"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"admin"</span><span class="hljs-punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line"><span class="hljs-punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>但是实际中，我们开发时通常会统一返回响应格式。例如：</p><figure class="highlight json hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-punctuation">{</span></span><br><span class="line">  <span class="hljs-attr">"code"</span><span class="hljs-punctuation">:</span><span class="hljs-number">200</span><span class="hljs-punctuation">,</span></span><br><span class="line">  <span class="hljs-attr">"message"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"success"</span><span class="hljs-punctuation">,</span></span><br><span class="line">  <span class="hljs-attr">"data"</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">{</span></span><br><span class="line">    <span class="hljs-attr">"sub"</span><span class="hljs-punctuation">:</span><span class="hljs-string">"admin"</span><span class="hljs-punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="hljs-punctuation">}</span></span><br><span class="line"><span class="hljs-punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><br><p>下面我们是我们通过以userNameAttributeName以 <strong>.</strong> 为分割符，提取用户信息实现，以下只展示部分代码，其余代码和<em>DefaultOAuth2UserService</em>y源码相同。</p><p>首先我们新建工具类JsonHelper用于解析Json</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Slf4j</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">JsonHelper</span> {</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> JsonHelper.<span class="hljs-type">MapTypeReference</span> <span class="hljs-variable">MAP_TYPE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">JsonHelper</span>.MapTypeReference();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ObjectMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="title function_">JsonHelper</span><span class="hljs-params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">static</span> {</span><br><span class="line">        mapper = <span class="hljs-keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="hljs-literal">false</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JsonNode <span class="title function_">getFirstNode</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JsonNode node, <span class="hljs-keyword">final</span> String path)</span> {</span><br><span class="line">        <span class="hljs-type">JsonNode</span> <span class="hljs-variable">resultNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (path != <span class="hljs-literal">null</span>) {</span><br><span class="line">            resultNode = getElement(node, path);</span><br><span class="line">        }</span><br><span class="line">        <span class="hljs-keyword">return</span> resultNode;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JsonNode <span class="title function_">getElement</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JsonNode json, <span class="hljs-keyword">final</span> String name)</span> {</span><br><span class="line">        <span class="hljs-keyword">if</span> (json != <span class="hljs-literal">null</span> &amp;&amp; name != <span class="hljs-literal">null</span>) {</span><br><span class="line">            <span class="hljs-type">JsonNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> json;</span><br><span class="line">            <span class="hljs-keyword">for</span> (String nodeName : name.split(<span class="hljs-string">"\\."</span>)) {</span><br><span class="line">                <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span>) {</span><br><span class="line">                    <span class="hljs-keyword">if</span> (nodeName.matches(<span class="hljs-string">"\\d+"</span>)) {</span><br><span class="line">                        node = node.get(Integer.parseInt(nodeName));</span><br><span class="line">                    } <span class="hljs-keyword">else</span> {</span><br><span class="line">                        node = node.get(nodeName);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span>) {</span><br><span class="line">                <span class="hljs-keyword">return</span> node;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">parseMap</span><span class="hljs-params">(String json)</span> {</span><br><span class="line">        <span class="hljs-keyword">try</span> {</span><br><span class="line">            <span class="hljs-keyword">return</span> mapper.readValue(json, MAP_TYPE);</span><br><span class="line">        } <span class="hljs-keyword">catch</span> (JsonProcessingException e) {</span><br><span class="line">            log.error(<span class="hljs-string">"Cannot convert json to map"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="title class_">MapTypeReference</span> <span class="hljs-keyword">extends</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, Object&gt;&gt; {</span><br><span class="line">        <span class="hljs-keyword">private</span> <span class="title function_">MapTypeReference</span><span class="hljs-params">()</span> {</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>新建DefaultJsonOAuth2UserService实现OAuth2UserService，添加多层JSON提取用户信息逻辑：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">DefaultJsonOAuth2UserService</span> <span class="hljs-keyword">implements</span> <span class="title class_">OAuth2UserService</span>&lt;OAuth2UserRequest, OAuth2User&gt; {</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">//...</span></span><br><span class="line">  </span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-keyword">public</span> OAuth2User <span class="title function_">loadUser</span><span class="hljs-params">(OAuth2UserRequest userRequest)</span> <span class="hljs-keyword">throws</span> OAuth2AuthenticationException {</span><br><span class="line">        <span class="hljs-comment">//...省略部分代码</span></span><br><span class="line">        RequestEntity&lt;?&gt; request = <span class="hljs-built_in">this</span>.requestEntityConverter.convert(userRequest);</span><br><span class="line">        ResponseEntity&lt;JsonNode&gt; response = getResponse(userRequest, request);</span><br><span class="line">        <span class="hljs-type">JsonNode</span> <span class="hljs-variable">responseBody</span> <span class="hljs-operator">=</span> response.getBody();</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">//多层JSON提取用户信息属性</span></span><br><span class="line">        Map&lt;String, Object&gt; userAttributes = <span class="hljs-keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="hljs-keyword">if</span> (userNameAttributeName.contains(<span class="hljs-string">"."</span>)) {</span><br><span class="line">          <span class="hljs-type">String</span> <span class="hljs-variable">firstNodePath</span> <span class="hljs-operator">=</span> userNameAttributeName.substring(<span class="hljs-number">0</span>, userNameAttributeName.lastIndexOf(<span class="hljs-string">"."</span>));</span><br><span class="line">          userAttributes = <span class="hljs-built_in">this</span>.extractUserAttribute(responseBody, firstNodePath);</span><br><span class="line">          userNameAttributeName = userNameAttributeName.substring(firstNodePath.length() + <span class="hljs-number">1</span>);</span><br><span class="line">        } <span class="hljs-keyword">else</span> {</span><br><span class="line">          userAttributes = JsonHelper.parseMap(responseBody.toString());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">//...省略部分代码</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如您需要参考详细代码，请查阅文末源码链接获取。</p><br><p>最后我们创建Controller类，使用<a href="https://www.thymeleaf.org/">thymeleaf</a>引擎构建首页信息，不同权限信息看到首页列表结果不同：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class HomeController {</span><br><span class="line"></span><br><span class="line">    private static Map&lt;String, List&lt;String&gt;&gt; articles = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    static {</span><br><span class="line">        articles.put("ROLE_OPERATION", Arrays.asList("Java"));</span><br><span class="line">        articles.put("ROLE_SYSTEM", Arrays.asList("Java", "Python", "C++"));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @GetMapping("/home")</span><br><span class="line">    public String home(Authentication authentication, Model model) {</span><br><span class="line">        String authority = authentication.getAuthorities().iterator().next().getAuthority();</span><br><span class="line">        model.addAttribute("articles", articles.get(authority));</span><br><span class="line">        return "home";</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>我们启动服务后，访问<a href="http://127.0.0.1:8070/login%EF%BC%8C">http://127.0.0.1:8070/login，</a> 首先使用用户名密码登录，您将会看到：</p><p><img src="/2022/07/25/oauth2-login/form-login-home.png"></p><p>之后我们退出登录使，用OAuth2 登录，您将会看到不同信息：</p><p><img src="/2022/07/25/oauth2-login/oauth2-login-home.png"></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>我们使用OAuth2.0 授权协议上构建身份认证证明是可行的。但是我们不能忽略在这之间的陷阱。</p><ol><li><p>令牌本身并不传递有关身份认证事件的信息。令牌可能是直接颁发给客户端的，使用的是无须用户交互的 OAuth 2.0 客户端凭据模式。</p></li><li><p>客户端都无法从访问令牌中得到关于用户及其登录状态的信息。OAuth 2.0 访问令牌的目标受众是资源服务器。（在本文中我们使用JWT访问令牌，通过自定义访问令牌信息使客户端服务获取用户权限等信息，但是OAuth2.0 协议中并没有定义访问令牌格式，我们仅是使用了JWT的特性来做到这一点。）</p></li><li><p>客户端可以出示访问令牌给资源服务获取用户信息，所以很容易就认为只要拥有一个有效的访问令牌，就能证明用户已登录，这一思路仅在某些情况下是正确的，即用户在授权服务器上完成身份认证，刚生成访问令牌的时候。（因为访问令牌有效期可能远长与身份认证会话有效期）</p></li><li><p>基于OAuth2.0的用户信息API的最大问题是，不同身份提供者实现用户信息API必然不同。用户的唯一标识可能是“user_id”，也可能是“sub”。</p></li></ol><p>所以我们需要统一的OAuth2.0为基础的标准身份认证协议。OpenID Connect 是一个开放标准，它定义了一种使用 OAuth 2.0 执行用户身份认证的互通方式。这将在后续文章中介绍它。</p><p>与往常一样，本文中使用的源代码可<a href="https://github.com/ReLive27/spring-security-oauth2-sample/tree/main/oauth2-login">在 GitHub 上</a>获得。</p></body></html>]]></content>
    
    
    <summary type="html">&lt;!-- spring security oauth2 login --&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="SpringSecurity" scheme="https://relive27.github.io/categories/SpringSecurity/"/>
    
    
    <category term="spring security" scheme="https://relive27.github.io/tags/spring-security/"/>
    
    <category term="OAuth2" scheme="https://relive27.github.io/tags/OAuth2/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security OAuth2 带有用于代码交换的证明密钥 (PKCE) 的授权码流</title>
    <link href="https://relive27.github.io/2022/07/17/oauth2-pkce/"/>
    <id>https://relive27.github.io/2022/07/17/oauth2-pkce/</id>
    <published>2022-07-17T04:21:50.000Z</published>
    <updated>2022-07-17T13:27:49.985Z</updated>
    
    <content type="html"><![CDATA[<!-- spring security oauth2 pkce --><html><head></head><body><span id="more"></span><h2 id="Spring-Security-OAuth2-带有用于代码交换的证明密钥-PKCE-的授权码流"><a href="#Spring-Security-OAuth2-带有用于代码交换的证明密钥-PKCE-的授权码流" class="headerlink" title="Spring Security OAuth2 带有用于代码交换的证明密钥 (PKCE) 的授权码流"></a>Spring Security OAuth2 带有用于代码交换的证明密钥 (PKCE) 的授权码流</h2><p><img src="/2022/07/17/oauth2-pkce/1_z-yDtw4IMrLeyjsdLfpRgQ.png"></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>OAuth2依据是否能持有客户端密钥，将客户端分为两种类型：<strong>公共客户端</strong>和<strong>保密客户端</strong>。</p><p><strong>保密客户端</strong>在服务器上运行，在前面介绍OAuth2文章中Spring Boot创建的应用程序是保密客户端类型的示例。首先它们在服务器上运行，并且通常位于具有其他保护措施防火墙或网关的后面。</p><p><strong>公共客户端</strong>的代码一般会以某种形式暴露给最终用户，要么是在浏览器中下载执行，要么是直接在用户的设备上运行。例如<strong>原生应用</strong>是直接在最终用户的设备（计算机或者移动设备）上运行的应用。这类应用在使用OAuth2协议时，我们无法保证为此应用颁发的客户端密钥能安全的存储，因为这些应用程序在运行之前会完全下载到设备上，反编译应用程序将完全显示客户端密钥。</p><p>同样存在此安全问题还有<strong>单页应用</strong>（SPA），浏览器本身是一个不安全的环境，一旦你加载JavaScript应用程序，浏览器将会下载整个源代码以便运行它，整个源代码，包括其中的任何 客户端密钥，都将可见。如果你构建一个拥有100000名用户的应用程序，那么很可能这些用户中的一部分将感染恶意软件或病毒，并泄漏客户端密钥。</p><p>你可能会想，“如果我通过将客户端密钥拆分为几个部分进行混淆呢？”这不可否认会为你争取点时间，但真正有决心的人仍可能会弄清楚。</p><p>为了规避这种安全风险，最好使用代码交换证明密钥(PKCE)。</p><h3 id="Proof-Key-for-Code-Exchange"><a href="#Proof-Key-for-Code-Exchange" class="headerlink" title="Proof Key for Code Exchange"></a>Proof Key for Code Exchange</h3><p>PKCE 有自己独立的<a href="https://tools.ietf.org/html/rfc7636">规范</a>。它使应用程序能够在公共客户端中使用授权码流程。</p><p><img src="/2022/07/17/oauth2-pkce/PKCE.drawio.png"></p><ol><li><p>用户在客户端请求资源。</p></li><li><p>客户端创建并记录名为 code_verifier 的秘密信息，然后客户端根据 code_verifier 计算出 code_challenge，它的值可以是 code_verifier，也可以是 code_verifier 的 SHA-256 散列，但是应该优先考虑使用密码散列，因为它能防止验证器本身遭到截获。</p></li><li><p>客户端将 code_challenge 以及可选的 code_challenge_method(一个关键字，表 示原文或者 SHA-256 散列)与常规的授权请求参数一起发送给授权服务器。</p></li><li><p>授权服务器将用户重定向到登录页面。</p></li><li><p>用户使进行身份验证，并且可能会看到一个同意页面，其中列出了 授权服务器将授予客户端的权限。</p></li><li><p>授权服务器将 code_challenge 和 code_challenge_method(如果有 的话)记录下来。授权服务器会将这些信息与颁发的授权码关联起来，并携带code重定向回客户端。</p></li><li><p>客户端接收到授权码之后，携带之前生成的 code_verifier 执行令牌请求。</p></li><li><p>授权服务器根据code_verifier计算出 code_challenge，并检查是否与最初提交的code_challenge一致。</p></li><li><p>授权服务器向客户端发送令牌。</p></li><li><p>客户端向受保护资源发送令牌。</p></li><li><p>受保护资源向客户端返回资源。</p></li></ol><h3 id="使用Spring-Authorization-Server搭建授权服务器"><a href="#使用Spring-Authorization-Server搭建授权服务器" class="headerlink" title="使用Spring Authorization Server搭建授权服务器"></a>使用Spring Authorization Server搭建授权服务器</h3><p>本节我们将使用<a href="https://spring.io/projects/spring-authorization-server">Spring Authorization Server</a>搭建一个授权服务器，并注册一个客户端使之支持PKCE。</p><h4 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h4><figure class="highlight xml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-oauth2-authorization-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>首先很简单，我们将创建application.yml文件，并指定授权服务器端口为8080：</p><figure class="highlight yaml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">server:</span></span><br><span class="line">  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span></span><br></pre></td></tr></tbody></table></figure><br><p>之后我们将创建一个<code>OAuth2ServerConfig</code>配置类，并在此类中我们将创建OAuth2授权服务所需特定Bean：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="hljs-keyword">public</span> SecurityFilterChain <span class="title function_">authorizationServerSecurityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception {</span><br><span class="line">  OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);</span><br><span class="line">  <span class="hljs-keyword">return</span> http.exceptionHandling(exceptions -&gt; exceptions.</span><br><span class="line">                                authenticationEntryPoint(<span class="hljs-keyword">new</span> <span class="title class_">LoginUrlAuthenticationEntryPoint</span>(<span class="hljs-string">"/login"</span>))).build();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-keyword">public</span> RegisteredClientRepository <span class="title function_">registeredClientRepository</span><span class="hljs-params">()</span> {</span><br><span class="line">  <span class="hljs-type">RegisteredClient</span> <span class="hljs-variable">registeredClient</span> <span class="hljs-operator">=</span> RegisteredClient.withId(UUID.randomUUID().toString())</span><br><span class="line">    .clientId(<span class="hljs-string">"relive-client"</span>)</span><br><span class="line">    .clientAuthenticationMethods(s -&gt; {</span><br><span class="line">      s.add(ClientAuthenticationMethod.NONE);<span class="hljs-comment">//客户端认证模式为none</span></span><br><span class="line">    })</span><br><span class="line">    .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)</span><br><span class="line">    .redirectUri(<span class="hljs-string">"http://127.0.0.1:8070/login/oauth2/code/messaging-client-pkce"</span>)</span><br><span class="line">    .scope(<span class="hljs-string">"message.read"</span>)</span><br><span class="line">    .clientSettings(ClientSettings.builder()</span><br><span class="line">                    .requireAuthorizationConsent(<span class="hljs-literal">true</span>)</span><br><span class="line">                    .requireProofKey(<span class="hljs-literal">true</span>) <span class="hljs-comment">//仅支持PKCE</span></span><br><span class="line">                    .build())</span><br><span class="line">    .tokenSettings(TokenSettings.builder()</span><br><span class="line">                   .accessTokenFormat(OAuth2TokenFormat.SELF_CONTAINED) <span class="hljs-comment">// 生成JWT令牌</span></span><br><span class="line">                   .idTokenSignatureAlgorithm(SignatureAlgorithm.RS256)</span><br><span class="line">                   .accessTokenTimeToLive(Duration.ofSeconds(<span class="hljs-number">30</span> * <span class="hljs-number">60</span>))</span><br><span class="line">                   .refreshTokenTimeToLive(Duration.ofSeconds(<span class="hljs-number">60</span> * <span class="hljs-number">60</span>))</span><br><span class="line">                   .reuseRefreshTokens(<span class="hljs-literal">true</span>)</span><br><span class="line">                   .build())</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">InMemoryRegisteredClientRepository</span>(registeredClient);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-keyword">public</span> ProviderSettings <span class="title function_">providerSettings</span><span class="hljs-params">()</span> {</span><br><span class="line">  <span class="hljs-keyword">return</span> ProviderSettings.builder()</span><br><span class="line">    .issuer(<span class="hljs-string">"http://127.0.0.1:8080"</span>)</span><br><span class="line">    .build();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-keyword">public</span> JWKSource&lt;SecurityContext&gt; <span class="title function_">jwkSource</span><span class="hljs-params">()</span> {</span><br><span class="line">  <span class="hljs-type">RSAKey</span> <span class="hljs-variable">rsaKey</span> <span class="hljs-operator">=</span> Jwks.generateRsa();</span><br><span class="line">  <span class="hljs-type">JWKSet</span> <span class="hljs-variable">jwkSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">JWKSet</span>(rsaKey);</span><br><span class="line">  <span class="hljs-keyword">return</span> (jwkSelector, securityContext) -&gt; jwkSelector.select(jwkSet);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="title class_">Jwks</span> {</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">private</span> <span class="title function_">Jwks</span><span class="hljs-params">()</span> {</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RSAKey <span class="title function_">generateRsa</span><span class="hljs-params">()</span> {</span><br><span class="line">    <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> KeyGeneratorUtils.generateRsaKey();</span><br><span class="line">    <span class="hljs-type">RSAPublicKey</span> <span class="hljs-variable">publicKey</span> <span class="hljs-operator">=</span> (RSAPublicKey) keyPair.getPublic();</span><br><span class="line">    <span class="hljs-type">RSAPrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> (RSAPrivateKey) keyPair.getPrivate();</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">RSAKey</span>.Builder(publicKey)</span><br><span class="line">      .privateKey(privateKey)</span><br><span class="line">      .keyID(UUID.randomUUID().toString())</span><br><span class="line">      .build();</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="title class_">KeyGeneratorUtils</span> {</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">private</span> <span class="title function_">KeyGeneratorUtils</span><span class="hljs-params">()</span> {</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">static</span> KeyPair <span class="title function_">generateRsaKey</span><span class="hljs-params">()</span> {</span><br><span class="line">    KeyPair keyPair;</span><br><span class="line">    <span class="hljs-keyword">try</span> {</span><br><span class="line">      <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">"RSA"</span>);</span><br><span class="line">      keyPairGenerator.initialize(<span class="hljs-number">2048</span>);</span><br><span class="line">      keyPair = keyPairGenerator.generateKeyPair();</span><br><span class="line">    } <span class="hljs-keyword">catch</span> (Exception ex) {</span><br><span class="line">      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> keyPair;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>请注意</strong>在创建<em>RegisteredClient</em>注册客户端类中，1.我们没有定义<code>client_secret</code>;2.客户端认证模式指定为none；3.requireProofKey()设置为true，此客户端仅支持PKCE。</p><p>其余配置我这里就不一一说明，可以参考<a href="https://relive27.github.io/2022/06/26/spring-security-oauth2-jwt/">之前文章</a>。</p><br><p>接下来，我们创建一个Spring Security的配置类，指定Form表单认证和设置用户名密码：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">SecurityConfig</span> {</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    SecurityFilterChain <span class="title function_">defaultSecurityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception {</span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests(authorizeRequests -&gt;</span><br><span class="line">                        authorizeRequests.anyRequest().authenticated()</span><br><span class="line">                )</span><br><span class="line">                .formLogin(withDefaults());</span><br><span class="line">        <span class="hljs-keyword">return</span> http.build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    UserDetailsService <span class="title function_">users</span><span class="hljs-params">()</span> {</span><br><span class="line">        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> User.withDefaultPasswordEncoder()</span><br><span class="line">                .username(<span class="hljs-string">"admin"</span>)</span><br><span class="line">                .password(<span class="hljs-string">"password"</span>)</span><br><span class="line">                .roles(<span class="hljs-string">"USER"</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>(user);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">passwordEncoder</span><span class="hljs-params">()</span> {</span><br><span class="line">        <span class="hljs-keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>至此我们就已经配置好了一个简单的授权服务器。</p><h3 id="OAuth2客户端"><a href="#OAuth2客户端" class="headerlink" title="OAuth2客户端"></a>OAuth2客户端</h3><p>本节中我们使用<a href="https://docs.spring.io/spring-security/reference/servlet/oauth2/client/index.html">Spring Security</a>创建一个客户端，此客户端通过PKCE授权码流向授权服务器请求授权，并将获取的access_token发送到资源服务。</p><h4 id="maven-1"><a href="#maven-1" class="headerlink" title="maven"></a>maven</h4><figure class="highlight xml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webflux<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.projectreactor.netty<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>reactor-netty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>首先我们将在application.yml中配置客户端信息，并指定服务端口号为8070：</p><figure class="highlight yaml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">server:</span></span><br><span class="line">  <span class="hljs-attr">port:</span> <span class="hljs-number">8070</span></span><br><span class="line">  <span class="hljs-attr">servlet:</span></span><br><span class="line">    <span class="hljs-attr">session:</span></span><br><span class="line">      <span class="hljs-attr">cookie:</span></span><br><span class="line">        <span class="hljs-attr">name:</span> <span class="hljs-string">CLIENT-SESSION</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-attr">spring:</span></span><br><span class="line">  <span class="hljs-attr">security:</span></span><br><span class="line">    <span class="hljs-attr">oauth2:</span></span><br><span class="line">      <span class="hljs-attr">client:</span></span><br><span class="line">        <span class="hljs-attr">registration:</span></span><br><span class="line">          <span class="hljs-attr">messaging-client-pkce:</span></span><br><span class="line">            <span class="hljs-attr">provider:</span> <span class="hljs-string">client-provider</span></span><br><span class="line">            <span class="hljs-attr">client-id:</span> <span class="hljs-string">relive-client</span></span><br><span class="line">            <span class="hljs-attr">client-secret:</span> <span class="hljs-string">relive-client</span></span><br><span class="line">            <span class="hljs-attr">authorization-grant-type:</span> <span class="hljs-string">authorization_code</span></span><br><span class="line">            <span class="hljs-attr">client-authentication-method:</span> <span class="hljs-string">none</span></span><br><span class="line">            <span class="hljs-attr">redirect-uri:</span> <span class="hljs-string">"http://127.0.0.1:8070/login/oauth2/code/{registrationId}"</span></span><br><span class="line">            <span class="hljs-attr">scope:</span> <span class="hljs-string">message.read</span></span><br><span class="line">            <span class="hljs-attr">client-name:</span> <span class="hljs-string">messaging-client-pkce</span></span><br><span class="line">        <span class="hljs-attr">provider:</span></span><br><span class="line">          <span class="hljs-attr">client-provider:</span></span><br><span class="line">            <span class="hljs-attr">authorization-uri:</span> <span class="hljs-string">http://127.0.0.1:8080/oauth2/authorize</span></span><br><span class="line">            <span class="hljs-attr">token-uri:</span> <span class="hljs-string">http://127.0.0.1:8080/oauth2/token</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><br><p>接下来，我们创建Spring Security配置类，启用OAuth2客户端。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">SecurityConfig</span> {</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception {</span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests(authorizeRequests -&gt;</span><br><span class="line">                        <span class="hljs-comment">//便于测试，将权限开放</span></span><br><span class="line">                        authorizeRequests.anyRequest().permitAll()</span><br><span class="line">                )</span><br><span class="line">                .oauth2Client(withDefaults());</span><br><span class="line">        <span class="hljs-keyword">return</span> http.build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    WebClient <span class="title function_">webClient</span><span class="hljs-params">(OAuth2AuthorizedClientManager authorizedClientManager)</span> {</span><br><span class="line">        <span class="hljs-type">ServletOAuth2AuthorizedClientExchangeFilterFunction</span> <span class="hljs-variable">oauth2Client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">ServletOAuth2AuthorizedClientExchangeFilterFunction</span>(authorizedClientManager);</span><br><span class="line">        <span class="hljs-keyword">return</span> WebClient.builder()</span><br><span class="line">                .filter(oauth2Client)</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    OAuth2AuthorizedClientManager <span class="title function_">authorizedClientManager</span><span class="hljs-params">(ClientRegistrationRepository clientRegistrationRepository,</span></span><br><span class="line"><span class="hljs-params">                                                          OAuth2AuthorizedClientRepository authorizedClientRepository)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="hljs-type">OAuth2AuthorizedClientProvider</span> <span class="hljs-variable">authorizedClientProvider</span> <span class="hljs-operator">=</span> OAuth2AuthorizedClientProviderBuilder</span><br><span class="line">                .builder()</span><br><span class="line">                .authorizationCode()</span><br><span class="line">                .refreshToken()</span><br><span class="line">                .build();</span><br><span class="line">        <span class="hljs-type">DefaultOAuth2AuthorizedClientManager</span> <span class="hljs-variable">authorizedClientManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">DefaultOAuth2AuthorizedClientManager</span>(clientRegistrationRepository, authorizedClientRepository);</span><br><span class="line">        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> authorizedClientManager;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>上述配置类中我们通过<em>oauth2Client(withDefaults())<em>启用OAuth2客户端。并创建一个WebClient实例用于向资源服务器执行HTTP请求。<code>OAuth2AuthorizedClientManager</code>这是协调OAuth2授权码请求的高级控制器类，不过授权码流程并不是由它控制，可以查看它所管理的</em>Provider</em>实现类<em>AuthorizationCodeOAuth2AuthorizedClientProvider</em>中并没有涉及相关授权码流程代码逻辑，对于Spring Security授权码模式涉及核心接口流程我会放在之后的文章统一介绍。回到<em>OAuth2AuthorizedClientManager</em>类中，我们可以看到同时还指定了<em>refreshToken()</em>,它实现了刷新token逻辑，将在请求资源服务过程中access_token过期后将刷新token，前提是refresh_token没有过期，否则你将重新执行OAuth2授权码流程。</p><br><p>接下来，我们创建一个Controller类，使用WebClient请求资源服务：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">PkceClientController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> WebClient webClient;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@GetMapping(value = "/client/test")</span></span><br><span class="line">    <span class="hljs-keyword">public</span> List <span class="title function_">getArticles</span><span class="hljs-params">(<span class="hljs-meta">@RegisteredOAuth2AuthorizedClient("messaging-client-pkce")</span> OAuth2AuthorizedClient authorizedClient)</span> {</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.webClient</span><br><span class="line">                .get()</span><br><span class="line">                .uri(<span class="hljs-string">"http://127.0.0.1:8090/resource/article"</span>)</span><br><span class="line">                .attributes(oauth2AuthorizedClient(authorizedClient))</span><br><span class="line">                .retrieve()</span><br><span class="line">                .bodyToMono(List.class)</span><br><span class="line">                .block();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="资源服务器"><a href="#资源服务器" class="headerlink" title="资源服务器"></a>资源服务器</h3><p>本节中，我们将使用Spring Security搭建一个资源服务器。</p><h3 id="maven-2"><a href="#maven-2" class="headerlink" title="maven"></a>maven</h3><figure class="highlight xml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-resource-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  </span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><p>通过application.yml配置资源服务器服务端口8070，并指定授权服务器jwk uri，用于获取公钥信息验证token令牌：</p><figure class="highlight yaml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">server:</span></span><br><span class="line">  <span class="hljs-attr">port:</span> <span class="hljs-number">8090</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-attr">spring:</span></span><br><span class="line">  <span class="hljs-attr">security:</span></span><br><span class="line">    <span class="hljs-attr">oauth2:</span></span><br><span class="line">      <span class="hljs-attr">resourceserver:</span></span><br><span class="line">        <span class="hljs-attr">jwt:</span></span><br><span class="line">          <span class="hljs-attr">jwk-set-uri:</span> <span class="hljs-string">http://127.0.0.1:8080/oauth2/jwks</span></span><br></pre></td></tr></tbody></table></figure><p>接下来配置Spring Security配置类，指定受保护端点访问权限：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">SecurityConfig</span> {</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="title function_">defaultSecurityFilter</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception {</span><br><span class="line">        http.requestMatchers()</span><br><span class="line">                .antMatchers(<span class="hljs-string">"/resource/article"</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeHttpRequests((authorize) -&gt; authorize</span><br><span class="line">                        .antMatchers(<span class="hljs-string">"/resource/article"</span>)</span><br><span class="line">                        .hasAuthority(<span class="hljs-string">"SCOPE_message.read"</span>)</span><br><span class="line">                        .mvcMatchers()</span><br><span class="line">                )</span><br><span class="line">                .oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);</span><br><span class="line">        <span class="hljs-keyword">return</span> http.build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述配置类中指定/resource/article必须拥有message.read权限才能访问，并配置资源服务使用JWT身份验证。</p><br><p>之后我们将创建Controller类，作为受保护端点：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">ArticleRestController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@GetMapping("/resource/article")</span></span><br><span class="line">    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="title function_">article</span><span class="hljs-params">()</span> {</span><br><span class="line">        <span class="hljs-keyword">return</span> Arrays.asList(<span class="hljs-string">"article1"</span>, <span class="hljs-string">"article2"</span>, <span class="hljs-string">"article3"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="访问资源列表"><a href="#访问资源列表" class="headerlink" title="访问资源列表"></a>访问资源列表</h3><p>启动所有服务后，在浏览器中输入 <a href="http://127.0.0.1:8070/client/test">http://127.0.0.1:8070/client/test</a> ，通过授权服务器认证后，您将在页面中看到以下输出信息：</p><figure class="highlight json hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-punctuation">[</span><span class="hljs-string">"article1"</span><span class="hljs-punctuation">,</span><span class="hljs-string">"article2"</span><span class="hljs-punctuation">,</span><span class="hljs-string">"article3"</span><span class="hljs-punctuation">]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>在Spring Security目前版本中保密客户端的 PKCE 已经成为默认行为。在保密客户端授权码模式中同样可以使用PKCE。</p><p>与往常一样，本文中使用的源代码可<a href="https://github.com/ReLive27/spring-security-oauth2-sample/tree/main/oauth2-pkce">在 GitHub 上</a>获得。</p></body></html>]]></content>
    
    
    <summary type="html">&lt;!-- spring security oauth2 pkce --&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="SpringSecurity" scheme="https://relive27.github.io/categories/SpringSecurity/"/>
    
    
    <category term="spring security" scheme="https://relive27.github.io/tags/spring-security/"/>
    
    <category term="OAuth2" scheme="https://relive27.github.io/tags/OAuth2/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security OAuth2客户端凭据授权</title>
    <link href="https://relive27.github.io/2022/07/09/oauth2-client-model/"/>
    <id>https://relive27.github.io/2022/07/09/oauth2-client-model/</id>
    <published>2022-07-09T10:22:26.000Z</published>
    <updated>2022-07-10T15:08:19.829Z</updated>
    
    <content type="html"><![CDATA[<!-- spring security client model --><html><head></head><body><span id="more"></span><h2 id="Spring-Security-OAuth2客户端凭据授权"><a href="#Spring-Security-OAuth2客户端凭据授权" class="headerlink" title="Spring Security OAuth2客户端凭据授权"></a>Spring Security OAuth2客户端凭据授权</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在没有明确的资源拥有者，或对于客户端来说资源拥有者不可区分，该怎么办？这是一种相当常见的场景。比如后端系统之间需要直接通信时，将使用<strong>客户端凭据授权</strong>。</p><p>OAuth2.0文档描述客户端凭据授权：</p><blockquote><p>客户端使用客户端凭据授予类型来获取用户上下文之外的访问令牌。这通常被客户端用来访问关于他们自己的资源，而不是访问用户的资源。</p></blockquote><p>在本文中，您将了解使用Spring Security构建OAuth2客户端凭据授权，在没有经过身份验证的用户的情况下允许服务安全的相互操作。</p><p>OAuth2客户端凭据授权相比于授权码授权更直接，它通常用于CRON任务和其他类型的后端数据处理等操作。</p><h3 id="客户端凭据授予流程"><a href="#客户端凭据授予流程" class="headerlink" title="客户端凭据授予流程"></a>客户端凭据授予流程</h3><p>当应用程序请求访问令牌以访问其自己的资源时，将使用客户端凭据授权，而不是代表用户。</p><h4 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h4><h5 id="grant-type（必需）"><a href="#grant-type（必需）" class="headerlink" title="grant_type（必需）"></a>grant_type（必需）</h5><p>该<code>grant_type</code>参数必须设置为<code>client_credentials</code>。</p><h5 id="scope（可选的）"><a href="#scope（可选的）" class="headerlink" title="scope（可选的）"></a>scope（可选的）</h5><p>您的服务可以支持客户端凭据授予的不同范围。</p><h5 id="客户端身份验证（必需）"><a href="#客户端身份验证（必需）" class="headerlink" title="客户端身份验证（必需）"></a>客户端身份验证（必需）</h5><p>客户端需要对此请求进行身份验证。通常，该服务将允许附加请求参数<code>client_id</code>和<code>client_secret</code>，或接受 HTTP Basic auth 标头中的客户端 ID 和机密。</p><p><img src="/2022/07/09/oauth2-client-model/client-credentials.png"></p><h3 id="OAuth2授权服务器"><a href="#OAuth2授权服务器" class="headerlink" title="OAuth2授权服务器"></a>OAuth2授权服务器</h3><p>这里我们使用<a href="https://spring.io/projects/spring-authorization-server#learn">Spring Authorization Server</a>构建OAuth2授权服务器，具体详细细节我这里就不重复赘述，可以参考此文<a href="https://relive27.github.io/2022/06/26/spring-security-oauth2-jwt/">JWT与Spring Security OAuth2结合使用</a>中授权服务器搭建，这里仅说明与之前授权码授予流程授权服务配置的不同之处。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在我们使用<em>RegisteredClient</em>构建器类型创建一个客户端，将配置此客户端支持客户端凭据授权，并简单的将它存储在内存中。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-keyword">public</span> RegisteredClientRepository <span class="title function_">registeredClientRepository</span><span class="hljs-params">()</span> {</span><br><span class="line">  <span class="hljs-type">RegisteredClient</span> <span class="hljs-variable">registeredClient</span> <span class="hljs-operator">=</span> RegisteredClient.withId(UUID.randomUUID().toString())</span><br><span class="line">    .clientId(<span class="hljs-string">"relive-client"</span>)</span><br><span class="line">    .clientSecret(<span class="hljs-string">"{noop}relive-client"</span>)</span><br><span class="line">    .clientAuthenticationMethods(s -&gt; {</span><br><span class="line">      s.add(ClientAuthenticationMethod.CLIENT_SECRET_POST);</span><br><span class="line">      s.add(ClientAuthenticationMethod.CLIENT_SECRET_BASIC);</span><br><span class="line">    })</span><br><span class="line">    .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)</span><br><span class="line">    .redirectUri(<span class="hljs-string">"http://127.0.0.1:8070/login/oauth2/code/messaging-client-model"</span>)</span><br><span class="line">    .scope(<span class="hljs-string">"message.read"</span>)</span><br><span class="line">    .clientSettings(ClientSettings.builder()</span><br><span class="line">                    .requireAuthorizationConsent(<span class="hljs-literal">true</span>)</span><br><span class="line">                    .requireProofKey(<span class="hljs-literal">false</span>)</span><br><span class="line">                    .build())</span><br><span class="line">    .tokenSettings(TokenSettings.builder()</span><br><span class="line">                   .accessTokenFormat(OAuth2TokenFormat.SELF_CONTAINED) </span><br><span class="line">                   .idTokenSignatureAlgorithm(SignatureAlgorithm.RS256)</span><br><span class="line">                   .accessTokenTimeToLive(Duration.ofSeconds(<span class="hljs-number">30</span> * <span class="hljs-number">60</span>))</span><br><span class="line">                   .refreshTokenTimeToLive(Duration.ofSeconds(<span class="hljs-number">60</span> * <span class="hljs-number">60</span>))</span><br><span class="line">                   .reuseRefreshTokens(<span class="hljs-literal">true</span>)</span><br><span class="line">                   .build())</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">InMemoryRegisteredClientRepository</span>(registeredClient);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述我们配置了一个OAuth2客户端，并将<em>authorizationGrantType</em>指定为<strong>client_credentials</strong>：</p><ul><li><strong>clientId</strong>: relive-client</li><li><strong>clientSecret</strong>: relive-client</li><li><strong>redirectUri</strong>: <a href="http://127.0.0.1:8070/login/oauth2/code/messaging-client-model">http://127.0.0.1:8070/login/oauth2/code/messaging-client-model</a></li><li><strong>scope</strong>: message.read</li></ul><h3 id="使用Spring-Security构建OAuth2资源服务器"><a href="#使用Spring-Security构建OAuth2资源服务器" class="headerlink" title="使用Spring Security构建OAuth2资源服务器"></a>使用Spring Security构建OAuth2资源服务器</h3><p>OAuth2资源服务器配置与此文<a href="https://relive27.github.io/2022/06/26/spring-security-oauth2-jwt/">JWT与Spring Security OAuth2结合使用</a>中资源服务搭建一致，您可以参考此文中OAuth2资源服务介绍，或可以在文末中获取本文源码地址进行查看。</p><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>OAuth2资源服务器提供了一个/<em>resource</em>/<em>article</em>受保护端点，并使用Spring Security保护此服务。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line">SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception {</span><br><span class="line">  http.requestMatchers()</span><br><span class="line">    .antMatchers(<span class="hljs-string">"/resource/article"</span>)</span><br><span class="line">    .and()</span><br><span class="line">    .authorizeRequests()</span><br><span class="line">    .mvcMatchers(<span class="hljs-string">"/resource/article"</span>)</span><br><span class="line">    .access(<span class="hljs-string">"hasAuthority('SCOPE_message.read')"</span>)</span><br><span class="line">    .and()</span><br><span class="line">    .oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);</span><br><span class="line">  <span class="hljs-keyword">return</span> http.build();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>请注意，OAuth2资源服务/<em>resource</em>/<em>article</em>端点要求拥有“message.read”权限才可以访问，Spring 自动在所需范围名称前添加“SCOPE_”，这样实际所需的范围是“message.read”而不是“SCOPE_message.read”。</p><h3 id="使用Spring-Security构建OAuth2客户端"><a href="#使用Spring-Security构建OAuth2客户端" class="headerlink" title="使用Spring Security构建OAuth2客户端"></a>使用Spring Security构建OAuth2客户端</h3><p>在本节中，您将使用当前推荐的WebClient，WebClient 是 Spring 的 WebFlux 包的一部分。这是 Spring 的反应式、非阻塞 API，您可以在<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html">Spring文档</a>中了解更多信息。</p><p>在此客户端中，在<code>@Scheduled</code>此注解定义的CRON任务下，您将使用<code>WebClient</code>来发出请求。</p><h4 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h4><figure class="highlight xml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webflux<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.projectreactor.netty<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>reactor-netty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><p>授权我们将在application.yml中配置OAuth2授权信息，并指定OAuth2客户端服务端口号：</p><figure class="highlight yaml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">server:</span></span><br><span class="line">  <span class="hljs-attr">port:</span> <span class="hljs-number">8070</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-attr">spring:</span></span><br><span class="line">  <span class="hljs-attr">security:</span></span><br><span class="line">    <span class="hljs-attr">oauth2:</span></span><br><span class="line">      <span class="hljs-attr">client:</span></span><br><span class="line">        <span class="hljs-attr">registration:</span></span><br><span class="line">          <span class="hljs-attr">messaging-client-model:</span></span><br><span class="line">            <span class="hljs-attr">provider:</span> <span class="hljs-string">client-provider</span></span><br><span class="line">            <span class="hljs-attr">client-id:</span> <span class="hljs-string">relive-client</span></span><br><span class="line">            <span class="hljs-attr">client-secret:</span> <span class="hljs-string">relive-client</span></span><br><span class="line">            <span class="hljs-attr">authorization-grant-type:</span> <span class="hljs-string">client_credentials</span></span><br><span class="line">            <span class="hljs-attr">client-authentication-method:</span> <span class="hljs-string">client_secret_post</span></span><br><span class="line">            <span class="hljs-attr">scope:</span> <span class="hljs-string">message.read</span></span><br><span class="line">            <span class="hljs-attr">client-name:</span> <span class="hljs-string">messaging-client-model</span></span><br><span class="line">        <span class="hljs-attr">provider:</span></span><br><span class="line">          <span class="hljs-attr">client-provider:</span></span><br><span class="line">            <span class="hljs-attr">token-uri:</span> <span class="hljs-string">http://127.0.0.1:8080/oauth2/token</span></span><br></pre></td></tr></tbody></table></figure><br><p>接下来我们将创建一个<em>SecurityConfig</em>类用来配置Spring Security OAuth2客户端所需Bean：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line">SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception {</span><br><span class="line">  http</span><br><span class="line">    .authorizeRequests(authorizeRequests -&gt;</span><br><span class="line">                       authorizeRequests.anyRequest().permitAll()</span><br><span class="line">                      )</span><br><span class="line">    .oauth2Client(withDefaults());</span><br><span class="line">  <span class="hljs-keyword">return</span> http.build();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line">WebClient <span class="title function_">webClient</span><span class="hljs-params">(OAuth2AuthorizedClientManager authorizedClientManager)</span> {</span><br><span class="line">  <span class="hljs-type">ServletOAuth2AuthorizedClientExchangeFilterFunction</span> <span class="hljs-variable">oauth2Client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">ServletOAuth2AuthorizedClientExchangeFilterFunction</span>(authorizedClientManager);</span><br><span class="line">  <span class="hljs-keyword">return</span> WebClient.builder()</span><br><span class="line">    .filter(oauth2Client)</span><br><span class="line">    .build();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line">OAuth2AuthorizedClientManager <span class="title function_">authorizedClientManager</span><span class="hljs-params">(ClientRegistrationRepository clientRegistrationRepository,</span></span><br><span class="line"><span class="hljs-params">                                                      OAuth2AuthorizedClientService authorizedClientService)</span> {</span><br><span class="line"></span><br><span class="line">  <span class="hljs-type">OAuth2AuthorizedClientProvider</span> <span class="hljs-variable">authorizedClientProvider</span> <span class="hljs-operator">=</span> OAuth2AuthorizedClientProviderBuilder</span><br><span class="line">    .builder()</span><br><span class="line">    .clientCredentials()</span><br><span class="line">    .build();</span><br><span class="line">  <span class="hljs-type">AuthorizedClientServiceOAuth2AuthorizedClientManager</span> <span class="hljs-variable">authorizedClientManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">AuthorizedClientServiceOAuth2AuthorizedClientManager</span>(clientRegistrationRepository, authorizedClientService);</span><br><span class="line">  authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> authorizedClientManager;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们创建一个WebClient实例用于向资源服务器执行HTTP请求，并给WebClient添加了一个OAuth2授权过滤器。<code>AuthorizedClientServiceOAuth2AuthorizedClientManager</code>这是协调OAuth2客户端凭据授予请求的高级控制器类，这里我将指出<code>AuthorizedClientServiceOAuth2AuthorizedClientManager</code>是一个专门设计用于在 HttpServletRequest 的上下文之外使用的类。</p><p>来自<a href="https://docs.spring.io/spring-security/site/docs/5.4.5/reference/html5/#oauth2Client-authorized-manager-provider">Spring 文档</a>：</p><blockquote><p>DefaultOAuth2AuthorizedClientManager 旨在用于 HttpServletRequest 的上下文中。在 HttpServletRequest 上下文之外操作时，请改用 AuthorizedClientServiceOAuth2AuthorizedClientManager。</p></blockquote><br><p>接下来我们将创建使用<code>@Scheduled</code>注解定义的任务，并注入WebClient调用资源服务请求：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">ArticleJob</span> {</span><br><span class="line"></span><br><span class="line">  <span class="hljs-meta">@Autowired</span></span><br><span class="line">  <span class="hljs-keyword">private</span> WebClient webClient;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-meta">@Scheduled(cron = "0/2 * * * * ? ")</span></span><br><span class="line">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="title function_">exchange</span><span class="hljs-params">()</span> {</span><br><span class="line">    <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.webClient</span><br><span class="line">      .get()</span><br><span class="line">      .uri(<span class="hljs-string">"http://127.0.0.1:8090/resource/article"</span>)</span><br><span class="line">      .attributes(clientRegistrationId(<span class="hljs-string">"messaging-client-model"</span>))</span><br><span class="line">      .retrieve()</span><br><span class="line">      .bodyToMono(List.class)</span><br><span class="line">      .block();</span><br><span class="line">    log.info(<span class="hljs-string">"调用资源服务器执行结果："</span> + list);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这个类中<code>exchange()</code>方法使用<code>@Scheduled</code>注解每2秒触发一次请求，在我们启动所有服务后，你应该看到这样的输出：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2022-07-09 19:55:22.281  INFO 20305 --- [   scheduling-1] com.relive.ArticleJob                    : 调用资源服务器执行结果：[article1, article2, article3]</span><br><span class="line">2022-07-09 19:55:24.023  INFO 20305 --- [   scheduling-1] com.relive.ArticleJob                    : 调用资源服务器执行结果：[article1, article2, article3]</span><br><span class="line">2022-07-09 19:55:26.015  INFO 20305 --- [   scheduling-1] com.relive.ArticleJob                    : 调用资源服务器执行结果：[article1, article2, article3]</span><br><span class="line">2022-07-09 19:55:28.009  INFO 20305 --- [   scheduling-1] com.relive.ArticleJob                    : 调用资源服务器执行结果：[article1, article2, article3]</span><br></pre></td></tr></tbody></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>与往常一样，本文中使用的源代码可<a href="https://github.com/ReLive27/spring-security-oauth2-sample/tree/main/oauth2-client-model">在 GitHub 上</a>获得。</p></body></html>]]></content>
    
    
    <summary type="html">&lt;!-- spring security client model --&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="SpringSecurity" scheme="https://relive27.github.io/categories/SpringSecurity/"/>
    
    
    <category term="spring security" scheme="https://relive27.github.io/tags/spring-security/"/>
    
    <category term="OAuth2" scheme="https://relive27.github.io/tags/OAuth2/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security 持久化OAuth2客户端</title>
    <link href="https://relive27.github.io/2022/07/03/persisrence-oauth2-client/"/>
    <id>https://relive27.github.io/2022/07/03/persisrence-oauth2-client/</id>
    <published>2022-07-03T03:55:25.000Z</published>
    <updated>2022-07-03T13:42:03.863Z</updated>
    
    <content type="html"><![CDATA[<!-- spring security persistence client --><html><head></head><body><span id="more"></span><h2 id="Spring-Security-持久化OAuth2客户端"><a href="#Spring-Security-持久化OAuth2客户端" class="headerlink" title="Spring Security 持久化OAuth2客户端"></a>Spring Security 持久化OAuth2客户端</h2><p>在<a href="https://relive27.github.io/2022/06/26/spring-security-oauth2-jwt/">之前文章中</a>介绍过了客户端通过向授权服务器（使用<a href="https://spring.io/projects/spring-authorization-server#learn">Spring Authorization Server</a>）请求授权并访问资源服务器受保护资源。在创建OAuth2客户端服务时，客户端注册通常从<code>application.yml </code>文件中自动加载，Spring 自动配置使用<code>OAuth2ClientProperties</code>在<code>spring.security.oauth2.client.registration.[registrationId]</code>创建一个<code>ClientRegistration</code>并实例化<code>ClientRegistrationRepository</code>。</p><p>以下Spring自动配置<code>OAuth2ClientRegistrationRepositoryConfiguration</code>代码如下：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration(</span></span><br><span class="line"><span class="hljs-meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="hljs-meta">)</span></span><br><span class="line"><span class="hljs-meta">@EnableConfigurationProperties({OAuth2ClientProperties.class})</span></span><br><span class="line"><span class="hljs-meta">@Conditional({ClientsConfiguredCondition.class})</span></span><br><span class="line"><span class="hljs-keyword">class</span> <span class="title class_">OAuth2ClientRegistrationRepositoryConfiguration</span> {</span><br><span class="line">    OAuth2ClientRegistrationRepositoryConfiguration() {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-meta">@ConditionalOnMissingBean({ClientRegistrationRepository.class})</span></span><br><span class="line">    InMemoryClientRegistrationRepository <span class="title function_">clientRegistrationRepository</span><span class="hljs-params">(OAuth2ClientProperties properties)</span> {</span><br><span class="line">        List&lt;ClientRegistration&gt; registrations = <span class="hljs-keyword">new</span> <span class="title class_">ArrayList</span>(OAuth2ClientPropertiesRegistrationAdapter.getClientRegistrations(properties).values());</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">InMemoryClientRegistrationRepository</span>(registrations);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如您所见，<code>ClientRegistrationRepository</code>默认实现并仅有一个实现类是<code>InMemoryClientRegistrationRepository</code>，它将ClientRegistration存储在内存中，而在生产环境中此方式可能会有一定局限性。</p><p>在本文中您将了解如何通过扩展ClientRegistrationRepository实现OAuth2客户端持久化。</p><h3 id="OAuth2客户端服务实现"><a href="#OAuth2客户端服务实现" class="headerlink" title="OAuth2客户端服务实现"></a>OAuth2客户端服务实现</h3><p>在本节中，您将创建一个简单的OAuth2客户端服务，并通过数据库存储OAuth2客户端信息，现在看代码！</p><h4 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h4><figure class="highlight xml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webflux<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.projectreactor.netty<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>reactor-netty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>首先让我们通过application.yml配置服务端口信息和数据库连接信息：</p><figure class="highlight yaml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">server:</span></span><br><span class="line">  <span class="hljs-attr">port:</span> <span class="hljs-number">8070</span></span><br><span class="line">  </span><br><span class="line"><span class="hljs-attr">spring:</span></span><br><span class="line">  <span class="hljs-attr">datasource:</span></span><br><span class="line">    <span class="hljs-attr">druid:</span></span><br><span class="line">      <span class="hljs-attr">db-type:</span> <span class="hljs-string">mysql</span></span><br><span class="line">      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/persistence_oauth2_client?createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">      <span class="hljs-attr">username:</span> <span class="hljs-string">&lt;&lt;username&gt;&gt;</span> <span class="hljs-comment"># 修改用户名</span></span><br><span class="line">      <span class="hljs-attr">password:</span> <span class="hljs-string">&lt;&lt;password&gt;&gt;</span> <span class="hljs-comment"># 修改密码</span></span><br></pre></td></tr></tbody></table></figure><p>接下来我们根据<code>ClientRegistration</code>来创建数据库表用于存储OAuth2客户端信息：</p><figure class="highlight sql hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `oauth2_registered_client`</span><br><span class="line">(</span><br><span class="line">    `registration_id`                 <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    `client_id`                       <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    `client_secret`                   <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>)  <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    `client_authentication_method`    <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    `authorization_grant_type`        <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    `client_name`                     <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>)  <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    `redirect_uri`                    <span class="hljs-type">varchar</span>(<span class="hljs-number">1000</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    `scopes`                          <span class="hljs-type">varchar</span>(<span class="hljs-number">1000</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    `authorization_uri`               <span class="hljs-type">varchar</span>(<span class="hljs-number">1000</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    `token_uri`                       <span class="hljs-type">varchar</span>(<span class="hljs-number">1000</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    `jwk_set_uri`                     <span class="hljs-type">varchar</span>(<span class="hljs-number">1000</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    `issuer_uri`                      <span class="hljs-type">varchar</span>(<span class="hljs-number">1000</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    `user_info_uri`                   <span class="hljs-type">varchar</span>(<span class="hljs-number">1000</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    `user_info_authentication_method` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)  <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    `user_name_attribute_name`        <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)  <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    `configuration_metadata`          <span class="hljs-type">varchar</span>(<span class="hljs-number">2000</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    <span class="hljs-keyword">PRIMARY</span> KEY (`registration_id`)</span><br><span class="line">) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8mb4_0900_ai_ci;</span><br></pre></td></tr></tbody></table></figure><p>下面将是我们通过实现<em>ClientRegistrationRepository</em>扩展的<em>JdbcClientRegistrationRepository</em>：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">JdbcClientRegistrationRepository</span> <span class="hljs-keyword">implements</span> <span class="title class_">ClientRegistrationRepository</span> {</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">COLUMN_NAMES</span> <span class="hljs-operator">=</span> <span class="hljs-string">"registration_id,client_id,client_secret,client_authentication_method,authorization_grant_type,client_name,redirect_uri,scopes,authorization_uri,token_uri,jwk_set_uri,issuer_uri,user_info_uri,user_info_authentication_method,user_name_attribute_name,configuration_metadata"</span>;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TABLE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">"oauth2_registered_client"</span>;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LOAD_CLIENT_REGISTERED_SQL</span> <span class="hljs-operator">=</span> <span class="hljs-string">"SELECT "</span> + COLUMN_NAMES + <span class="hljs-string">" FROM "</span> + TABLE_NAME + <span class="hljs-string">" WHERE "</span>;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">INSERT_CLIENT_REGISTERED_SQL</span> <span class="hljs-operator">=</span> <span class="hljs-string">"INSERT INTO "</span> + TABLE_NAME + <span class="hljs-string">"("</span> + COLUMN_NAMES + <span class="hljs-string">") VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"</span>;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">UPDATE_CLIENT_REGISTERED_SQL</span> <span class="hljs-operator">=</span> <span class="hljs-string">"UPDATE "</span> + TABLE_NAME + <span class="hljs-string">" SET client_id = ?,client_secret = ?,client_authentication_method = ?,authorization_grant_type = ?,client_name = ?,redirect_uri = ?,scopes = ?,authorization_uri = ?,token_uri = ?,jwk_set_uri = ?,issuer_uri = ?,user_info_uri = ?,user_info_authentication_method = ?,user_name_attribute_name = ? WHERE registration_id = ?"</span>;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> JdbcOperations jdbcOperations;</span><br><span class="line">    <span class="hljs-keyword">private</span> RowMapper&lt;ClientRegistration&gt; clientRegistrationRowMapper;</span><br><span class="line">    <span class="hljs-keyword">private</span> Function&lt;ClientRegistration, List&lt;SqlParameterValue&gt;&gt; clientRegistrationListParametersMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="title function_">JdbcClientRegistrationRepository</span><span class="hljs-params">(JdbcOperations jdbcOperations)</span> {</span><br><span class="line">        Assert.notNull(jdbcOperations, <span class="hljs-string">"JdbcOperations can not be null"</span>);</span><br><span class="line">        <span class="hljs-built_in">this</span>.jdbcOperations = jdbcOperations;</span><br><span class="line">        <span class="hljs-built_in">this</span>.clientRegistrationRowMapper = <span class="hljs-keyword">new</span> <span class="title class_">ClientRegistrationRowMapper</span>();</span><br><span class="line">        <span class="hljs-built_in">this</span>.clientRegistrationListParametersMapper = <span class="hljs-keyword">new</span> <span class="title class_">ClientRegistrationParametersMapper</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-keyword">public</span> ClientRegistration <span class="title function_">findByRegistrationId</span><span class="hljs-params">(String registrationId)</span> {</span><br><span class="line">        Assert.hasText(registrationId, <span class="hljs-string">"registrationId cannot be empty"</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.findBy(<span class="hljs-string">"registration_id = ?"</span>, registrationId);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> ClientRegistration <span class="title function_">findBy</span><span class="hljs-params">(String filter, Object... args)</span> {</span><br><span class="line">        List&lt;ClientRegistration&gt; result = <span class="hljs-built_in">this</span>.jdbcOperations.query(LOAD_CLIENT_REGISTERED_SQL + filter, <span class="hljs-built_in">this</span>.clientRegistrationRowMapper, args);</span><br><span class="line">        <span class="hljs-keyword">return</span> !result.isEmpty() ? result.get(<span class="hljs-number">0</span>) : <span class="hljs-literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="title function_">save</span><span class="hljs-params">(ClientRegistration clientRegistration)</span> {</span><br><span class="line">        Assert.notNull(clientRegistration, <span class="hljs-string">"clientRegistration cannot be null"</span>);</span><br><span class="line">        <span class="hljs-type">ClientRegistration</span> <span class="hljs-variable">existingClientRegistration</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.findByRegistrationId(clientRegistration.getRegistrationId());</span><br><span class="line">        <span class="hljs-keyword">if</span> (existingClientRegistration != <span class="hljs-literal">null</span>) {</span><br><span class="line">            <span class="hljs-built_in">this</span>.updateRegisteredClient(clientRegistration);</span><br><span class="line">        } <span class="hljs-keyword">else</span> {</span><br><span class="line">            <span class="hljs-built_in">this</span>.insertClientRegistration(clientRegistration);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="title function_">updateRegisteredClient</span><span class="hljs-params">(ClientRegistration clientRegistration)</span> {</span><br><span class="line">        List&lt;SqlParameterValue&gt; parameterValues = <span class="hljs-built_in">this</span>.clientRegistrationListParametersMapper.apply(clientRegistration);</span><br><span class="line">        <span class="hljs-type">PreparedStatementSetter</span> <span class="hljs-variable">statementSetter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">ArgumentPreparedStatementSetter</span>(parameterValues.toArray());</span><br><span class="line">        <span class="hljs-built_in">this</span>.jdbcOperations.update(UPDATE_CLIENT_REGISTERED_SQL, statementSetter);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="title function_">insertClientRegistration</span><span class="hljs-params">(ClientRegistration clientRegistration)</span> {</span><br><span class="line">        List&lt;SqlParameterValue&gt; parameterValues = <span class="hljs-built_in">this</span>.clientRegistrationListParametersMapper.apply(clientRegistration);</span><br><span class="line">        <span class="hljs-type">PreparedStatementSetter</span> <span class="hljs-variable">statementSetter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">ArgumentPreparedStatementSetter</span>(parameterValues.toArray());</span><br><span class="line">        <span class="hljs-built_in">this</span>.jdbcOperations.update(INSERT_CLIENT_REGISTERED_SQL, statementSetter);</span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-comment">//...省略部分代码</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>之后我们将创建<code>SecurityConfig</code>安全配置类，在此类中创建OAuth2 Client所需特定的Bean。首先我们将实例化上述自定义的<em>JdbcClientRegistrationRepository</em>：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-keyword">public</span> ClientRegistrationRepository <span class="title function_">clientRegistrationRepository</span><span class="hljs-params">(JdbcTemplate jdbcTemplate)</span> {</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">JdbcClientRegistrationRepository</span>(jdbcTemplate);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>ClientRegistration</strong>：表示使用 OAuth 2.0 或 OpenID Connect (OIDC) 注册的客户端。它包含有关客户端的所有基本信息，例如客户端 ID、客户端机密、授权类型和各种 URI。</p><p><strong>ClientRegistrationRepository</strong>：这是一个包含<em>ClientRegistrations</em>并负责持久化。</p><br><p>接下来配置OAuth2AuthorizedClient管理类<em>OAuth2AuthorizedClientService</em>：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-keyword">public</span> OAuth2AuthorizedClientService <span class="title function_">authorizedClientService</span><span class="hljs-params">(</span></span><br><span class="line"><span class="hljs-params">  JdbcTemplate jdbcTemplate,</span></span><br><span class="line"><span class="hljs-params">  ClientRegistrationRepository clientRegistrationRepository)</span> {</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">JdbcOAuth2AuthorizedClientService</span>(jdbcTemplate, clientRegistrationRepository);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>OAuth2AuthorizedClient</strong>：表示授权客户端。这是一个包含客户端注册但添加身份验证信息的组合类。</p><p><strong>OAuth2AuthorizedClientService</strong>：负责<code>OAuth2AuthorizedClient</code>在 Web 请求之间进行持久化。</p><br><p>定义<em>JdbcOAuth2AuthorizedClientService</em>需要创建所需数据表，你可以在<a href="https://docs.spring.io/spring-security/site/docs/5.4.5/reference/html5/#dbschema-oauth2-client">OAuth2 Client Schema</a>中获取表定义：</p><figure class="highlight sql hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> oauth2_authorized_client</span><br><span class="line">(</span><br><span class="line">    client_registration_id  <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)                            <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    principal_name          <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>)                            <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    access_token_type       <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)                            <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    access_token_value      <span class="hljs-type">blob</span>                                    <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    access_token_issued_at  <span class="hljs-type">timestamp</span>                               <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    access_token_expires_at <span class="hljs-type">timestamp</span>                               <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    access_token_scopes     <span class="hljs-type">varchar</span>(<span class="hljs-number">1000</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    refresh_token_value     <span class="hljs-type">blob</span>          <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    refresh_token_issued_at <span class="hljs-type">timestamp</span>     <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    created_at              <span class="hljs-type">timestamp</span>     <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,</span><br><span class="line">    <span class="hljs-keyword">PRIMARY</span> KEY (client_registration_id, principal_name)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p>接下来配置<em>OAuth2AuthorizedClientRepository</em>容器类：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-keyword">public</span> OAuth2AuthorizedClientRepository <span class="title function_">authorizedClientRepository</span><span class="hljs-params">(</span></span><br><span class="line"><span class="hljs-params">  OAuth2AuthorizedClientService authorizedClientService)</span> {</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">AuthenticatedPrincipalOAuth2AuthorizedClientRepository</span>(authorizedClientService);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>OAuth2AuthorizedClientRepository</strong>:是一个容器类，用于在请求之间保存和持久化授权客户端。这里通过<em>JdbcOAuth2AuthorizedClientService</em>将客户端存储在数据库中。</p><br><p>接下来实例化包含授权流程的逻辑的管理器类：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line">OAuth2AuthorizedClientManager <span class="title function_">authorizedClientManager</span><span class="hljs-params">(ClientRegistrationRepository clientRegistrationRepository,</span></span><br><span class="line"><span class="hljs-params">                                                      OAuth2AuthorizedClientRepository authorizedClientRepository)</span> {</span><br><span class="line"></span><br><span class="line">  <span class="hljs-type">OAuth2AuthorizedClientProvider</span> <span class="hljs-variable">authorizedClientProvider</span> <span class="hljs-operator">=</span> OAuth2AuthorizedClientProviderBuilder</span><br><span class="line">    .builder()</span><br><span class="line">    .authorizationCode()</span><br><span class="line">    .refreshToken()</span><br><span class="line">    .build();</span><br><span class="line">  <span class="hljs-type">DefaultOAuth2AuthorizedClientManager</span> <span class="hljs-variable">authorizedClientManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">DefaultOAuth2AuthorizedClientManager</span>(clientRegistrationRepository, authorizedClientRepository);</span><br><span class="line">  authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> authorizedClientManager;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>OAuth2AuthorizedClientManager</strong>：是包含处理授权流程的逻辑的管理器类。最重要的是，它使用<code>OAuth2AuthorizedClientProvider</code>处理不同授权类型和 OAuth 2.0 提供者的实际请求逻辑。它还委托<code>OAuth2AuthorizedClientRepository</code>在客户端授权成功或失败时调用成功或失败处理程序。</p><br><p>现在让我们创建一个WebClient实例用于向资源服务器执行HTTP请求：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">   WebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {</span><br><span class="line">       ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client = new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);</span><br><span class="line">       return WebClient.builder()</span><br><span class="line">               .apply(oauth2Client.oauth2Configuration())</span><br><span class="line">               .build();</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><br><p>最后，我们将配置Spring Security安全配置：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">   SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {</span><br><span class="line">       http</span><br><span class="line">               .authorizeRequests(authorizeRequests -&gt;</span><br><span class="line">                       authorizeRequests.anyRequest().authenticated()</span><br><span class="line">               )</span><br><span class="line">               .formLogin(login -&gt; {</span><br><span class="line">                   login.loginPage("/login").permitAll();</span><br><span class="line">               })</span><br><span class="line">               .oauth2Client(withDefaults());</span><br><span class="line">       return http.build();</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>这里配置所有请求需要认证授权，提供Form表单认证方式，并通过<a href="https://www.thymeleaf.org/">thymeleaf</a>自定义登录模版，此处代码并不再本文讲解范围内，以下将不展示具体细节。</p><h4 id="访问资源列表"><a href="#访问资源列表" class="headerlink" title="访问资源列表"></a>访问资源列表</h4><p>我们将创建一个<em>PersistenceClientController</em>，并使用WebClient向资源服务器发起HTTP请求：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">PersistenceClientController</span> {</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> WebClient webClient;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@GetMapping(value = "/client/test")</span></span><br><span class="line">    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="title function_">getArticles</span><span class="hljs-params">(<span class="hljs-meta">@RegisteredOAuth2AuthorizedClient("messaging-client-authorization-code")</span> OAuth2AuthorizedClient authorizedClient)</span> {</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.webClient</span><br><span class="line">                .get()</span><br><span class="line">                .uri(<span class="hljs-string">"http://127.0.0.1:8090/resource/article"</span>)</span><br><span class="line">                .attributes(oauth2AuthorizedClient(authorizedClient))</span><br><span class="line">                .retrieve()</span><br><span class="line">                .bodyToMono(List.class)</span><br><span class="line">                .block();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><p>在本文中，您看到了OAuth2客户端服务持久化到数据库的实现方法，对于其他授权服务器和资源服务器配置将不再讲解，如果您感兴趣可以参考此文章<a href="https://relive27.github.io/2022/06/26/spring-security-oauth2-jwt/">将JWT与Spring Security OAuth2结合使用</a>。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>与往常一样，本文中使用的源代码可<a href="https://github.com/ReLive27/spring-security-oauth2-sample/tree/main/oauth2-persistence-client">在 GitHub 上</a>获得。</p></body></html>]]></content>
    
    
    <summary type="html">&lt;!-- spring security persistence client --&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="SpringSecurity" scheme="https://relive27.github.io/categories/SpringSecurity/"/>
    
    
    <category term="spring security" scheme="https://relive27.github.io/tags/spring-security/"/>
    
    <category term="OAuth2" scheme="https://relive27.github.io/tags/OAuth2/"/>
    
  </entry>
  
  <entry>
    <title>自定义OAuth2授权同意页面</title>
    <link href="https://relive27.github.io/2022/06/28/custom-oauth2-consent-page/"/>
    <id>https://relive27.github.io/2022/06/28/custom-oauth2-consent-page/</id>
    <published>2022-06-28T11:40:29.000Z</published>
    <updated>2022-06-28T12:24:54.035Z</updated>
    
    <content type="html"><![CDATA[<!-- custom oauth2 consent page --><html><head></head><body><span id="more"></span><h2 id="自定义OAuth2授权同意页面"><a href="#自定义OAuth2授权同意页面" class="headerlink" title="自定义OAuth2授权同意页面"></a>自定义OAuth2授权同意页面</h2><p><a href="https://relive27.github.io/2022/06/26/spring-security-oauth2-jwt/">前文</a>我们已经简单的介绍了如何搭建授权服务器，下面将继续介绍如何自定义OAuth2授权同意页面。</p><p>如果你已经无法容忍<a href="https://spring.io/projects/spring-authorization-server#learn">Spring Authorization Server</a> 默认丑陋的授权同意页面，那么你可以继续阅读本文，逐步创建一个令自己满意的授权同意页面。</p><h3 id="OAuth2授权服务器实现"><a href="#OAuth2授权服务器实现" class="headerlink" title="OAuth2授权服务器实现"></a>OAuth2授权服务器实现</h3><p>从创建一个授权服务器开始。</p><h4 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h4><figure class="highlight xml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-oauth2-authorization-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>首先我们为授权服务器配置端口8080:</p><figure class="highlight yaml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">server:</span></span><br><span class="line">  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span></span><br></pre></td></tr></tbody></table></figure><p>之后我们创建一个<code>AuthorizationServerConfig</code>配置类，在此类中我们将创建OAuth2授权服务器所需特定的Bean。首先指定我们授权同意页面/<em>oauth2</em>/<em>consent</em>  uri替换原有默认实现。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">AuthorizationServerConfig</span> {</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CUSTOM_CONSENT_PAGE_URI</span> <span class="hljs-operator">=</span> <span class="hljs-string">"/oauth2/consent"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line">    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="title function_">authorizationServerSecurityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception {</span><br><span class="line">        OAuth2AuthorizationServerConfigurer&lt;HttpSecurity&gt; authorizationServerConfigurer = <span class="hljs-keyword">new</span> <span class="title class_">OAuth2AuthorizationServerConfigurer</span>&lt;&gt;();</span><br><span class="line">        <span class="hljs-comment">//定义授权同意页面</span></span><br><span class="line">        authorizationServerConfigurer.authorizationEndpoint(authorizationEndpoint -&gt;</span><br><span class="line">                authorizationEndpoint.consentPage(CUSTOM_CONSENT_PAGE_URI));</span><br><span class="line"></span><br><span class="line">        <span class="hljs-type">RequestMatcher</span> <span class="hljs-variable">endpointsMatcher</span> <span class="hljs-operator">=</span> authorizationServerConfigurer</span><br><span class="line">                .getEndpointsMatcher();</span><br><span class="line"></span><br><span class="line">        http.requestMatcher(endpointsMatcher)</span><br><span class="line">                .authorizeRequests(authorizeRequests -&gt;</span><br><span class="line">                        authorizeRequests.anyRequest().authenticated()</span><br><span class="line">                )</span><br><span class="line">                .csrf(csrf -&gt; csrf.ignoringRequestMatchers(endpointsMatcher))</span><br><span class="line">                .apply(authorizationServerConfigurer);</span><br><span class="line">        <span class="hljs-keyword">return</span> http.exceptionHandling(exceptions -&gt; exceptions.</span><br><span class="line">                authenticationEntryPoint(<span class="hljs-keyword">new</span> <span class="title class_">LoginUrlAuthenticationEntryPoint</span>(<span class="hljs-string">"/login"</span>))).build();</span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-comment">//...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接下来我们使用<em>RegisteredClient</em>构建器类型创建一个OAuth2客户端，并将它存储在缓存中。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line">   <span class="hljs-keyword">public</span> RegisteredClientRepository <span class="title function_">registeredClientRepository</span><span class="hljs-params">()</span> {</span><br><span class="line">       <span class="hljs-type">RegisteredClient</span> <span class="hljs-variable">registeredClient</span> <span class="hljs-operator">=</span> RegisteredClient.withId(UUID.randomUUID().toString())</span><br><span class="line">               .clientId(<span class="hljs-string">"relive-client"</span>)</span><br><span class="line">               .clientSecret(<span class="hljs-string">"{noop}relive-client"</span>)</span><br><span class="line">               .clientName(<span class="hljs-string">"ReLive27"</span>)</span><br><span class="line">               .clientAuthenticationMethods(s -&gt; {</span><br><span class="line">                   s.add(ClientAuthenticationMethod.CLIENT_SECRET_POST);</span><br><span class="line">                   s.add(ClientAuthenticationMethod.CLIENT_SECRET_BASIC);</span><br><span class="line">               })</span><br><span class="line">               .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)</span><br><span class="line">               .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)</span><br><span class="line">               .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)</span><br><span class="line">               .authorizationGrantType(AuthorizationGrantType.PASSWORD)</span><br><span class="line">               .redirectUri(<span class="hljs-string">"http://127.0.0.1:8070/login/oauth2/code/messaging-client-authorization-code"</span>)</span><br><span class="line">               .scope(OidcScopes.PROFILE)</span><br><span class="line">               .scope(<span class="hljs-string">"message.read"</span>)</span><br><span class="line">               .scope(<span class="hljs-string">"message.write"</span>)</span><br><span class="line">               .clientSettings(ClientSettings.builder()</span><br><span class="line">                       .requireAuthorizationConsent(<span class="hljs-literal">true</span>)</span><br><span class="line">                       .requireProofKey(<span class="hljs-literal">false</span>)</span><br><span class="line">                       .build())</span><br><span class="line">               .tokenSettings(TokenSettings.builder()</span><br><span class="line">                       .accessTokenFormat(OAuth2TokenFormat.SELF_CONTAINED)</span><br><span class="line">                       .idTokenSignatureAlgorithm(SignatureAlgorithm.RS256)</span><br><span class="line">                       .accessTokenTimeToLive(Duration.ofSeconds(<span class="hljs-number">30</span> * <span class="hljs-number">60</span>))</span><br><span class="line">                       .refreshTokenTimeToLive(Duration.ofSeconds(<span class="hljs-number">60</span> * <span class="hljs-number">60</span>))</span><br><span class="line">                       .reuseRefreshTokens(<span class="hljs-literal">true</span>)</span><br><span class="line">                       .build())</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">InMemoryRegisteredClientRepository</span>(registeredClient);</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>其余配置将不再赘述，可以参考之前<a href="https://relive27.github.io/2022/06/26/spring-security-oauth2-jwt/">将JWT与Spring Security OAuth2结合使用</a>文章。</p><br><p>接下来将创建一个授权页面控制器，并将所需参数传递给<em>Model</em>：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Controller</span></span><br><span class="line"><span class="hljs-meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">AuthorizationConsentController</span> {</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RegisteredClientRepository registeredClientRepository;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@GetMapping(value = "/oauth2/consent")</span></span><br><span class="line">    <span class="hljs-keyword">public</span> String <span class="title function_">consent</span><span class="hljs-params">(Principal principal, Model model,</span></span><br><span class="line"><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(OAuth2ParameterNames.CLIENT_ID)</span> String clientId,</span></span><br><span class="line"><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(OAuth2ParameterNames.SCOPE)</span> String scope,</span></span><br><span class="line"><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(OAuth2ParameterNames.STATE)</span> String state)</span> {</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; scopesToApprove = <span class="hljs-keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="hljs-type">RegisteredClient</span> <span class="hljs-variable">registeredClient</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.registeredClientRepository.findByClientId(clientId);</span><br><span class="line">        Set&lt;String&gt; scopes = registeredClient.getScopes();</span><br><span class="line">        <span class="hljs-keyword">for</span> (String requestedScope : StringUtils.delimitedListToStringArray(scope, <span class="hljs-string">" "</span>)) {</span><br><span class="line">            <span class="hljs-keyword">if</span> (scopes.contains(requestedScope)) {</span><br><span class="line">                scopesToApprove.add(requestedScope);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="hljs-string">"clientId"</span>, clientId);</span><br><span class="line">        model.addAttribute(<span class="hljs-string">"clientName"</span>, registeredClient.getClientName());</span><br><span class="line">        model.addAttribute(<span class="hljs-string">"state"</span>, state);</span><br><span class="line">        model.addAttribute(<span class="hljs-string">"scopes"</span>, withDescription(scopesToApprove));</span><br><span class="line">        model.addAttribute(<span class="hljs-string">"principalName"</span>, principal.getName());</span><br><span class="line">        model.addAttribute(<span class="hljs-string">"redirectUri"</span>, registeredClient.getRedirectUris().iterator().next());</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"consent"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Set&lt;ScopeWithDescription&gt; <span class="title function_">withDescription</span><span class="hljs-params">(Set&lt;String&gt; scopes)</span> {</span><br><span class="line">        Set&lt;ScopeWithDescription&gt; scopeWithDescriptions = <span class="hljs-keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="hljs-keyword">for</span> (String scope : scopes) {</span><br><span class="line">            scopeWithDescriptions.add(<span class="hljs-keyword">new</span> <span class="title class_">ScopeWithDescription</span>(scope));</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        <span class="hljs-keyword">return</span> scopeWithDescriptions;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="title class_">ScopeWithDescription</span> {</span><br><span class="line">        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_DESCRIPTION</span> <span class="hljs-operator">=</span> <span class="hljs-string">"我们无法提供有关此权限的信息"</span>;</span><br><span class="line">        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, String&gt; scopeDescriptions = <span class="hljs-keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">static</span> {</span><br><span class="line">            scopeDescriptions.put(</span><br><span class="line">                    <span class="hljs-string">"profile"</span>,</span><br><span class="line">                    <span class="hljs-string">"验证您的身份"</span></span><br><span class="line">            );</span><br><span class="line">            scopeDescriptions.put(</span><br><span class="line">                    <span class="hljs-string">"message.read"</span>,</span><br><span class="line">                    <span class="hljs-string">"了解您可以访问哪些权限"</span></span><br><span class="line">            );</span><br><span class="line">            scopeDescriptions.put(</span><br><span class="line">                    <span class="hljs-string">"message.write"</span>,</span><br><span class="line">                    <span class="hljs-string">"代表您行事"</span></span><br><span class="line">            );</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String scope;</span><br><span class="line">        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String description;</span><br><span class="line"></span><br><span class="line">        ScopeWithDescription(String scope) {</span><br><span class="line">            <span class="hljs-built_in">this</span>.scope = scope;</span><br><span class="line">            <span class="hljs-built_in">this</span>.description = scopeDescriptions.getOrDefault(scope, DEFAULT_DESCRIPTION);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>之后让我们定义html页面，这里使用<a href="https://www.thymeleaf.org/">thymeleaf</a>模版引擎：</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"</span></span></span><br><span class="line"><span class="hljs-tag">          <span class="hljs-attr">integrity</span>=<span class="hljs-string">"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z"</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">"anonymous"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Custom consent page - Consent required<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-language-css"></span></span><br><span class="line"><span class="hljs-language-css">        <span class="hljs-selector-tag">body</span> {</span></span><br><span class="line"><span class="hljs-language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f6f8fa</span>;</span></span><br><span class="line"><span class="hljs-language-css">        }</span></span><br><span class="line"><span class="hljs-language-css"></span></span><br><span class="line"><span class="hljs-language-css">        <span class="hljs-selector-id">#submit-consent</span> {</span></span><br><span class="line"><span class="hljs-language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">45%</span>;</span></span><br><span class="line"><span class="hljs-language-css">            <span class="hljs-attribute">float</span>: right;</span></span><br><span class="line"><span class="hljs-language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span></span><br><span class="line"><span class="hljs-language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span></span><br><span class="line"><span class="hljs-language-css">            <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#cccccc</span>;</span></span><br><span class="line"><span class="hljs-language-css">            <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">3%</span>;</span></span><br><span class="line"><span class="hljs-language-css">        }</span></span><br><span class="line"><span class="hljs-language-css"></span></span><br><span class="line"><span class="hljs-language-css">        <span class="hljs-selector-id">#cancel-consent</span> {</span></span><br><span class="line"><span class="hljs-language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">45%</span>;</span></span><br><span class="line"><span class="hljs-language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span></span><br><span class="line"><span class="hljs-language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span></span><br><span class="line"><span class="hljs-language-css">            <span class="hljs-attribute">color</span>: black;</span></span><br><span class="line"><span class="hljs-language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#cccccc</span>;</span></span><br><span class="line"><span class="hljs-language-css">            <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#cccccc</span>;</span></span><br><span class="line"><span class="hljs-language-css">            <span class="hljs-attribute">float</span>: left;</span></span><br><span class="line"><span class="hljs-language-css">            <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">3%</span>;</span></span><br><span class="line"><span class="hljs-language-css">        }</span></span><br><span class="line"><span class="hljs-language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-language-javascript"></span></span><br><span class="line"><span class="hljs-language-javascript">        <span class="hljs-keyword">function</span> <span class="title function_">cancelConsent</span>(<span class="hljs-params"></span>) {</span></span><br><span class="line"><span class="hljs-language-javascript">            <span class="variable language_">document</span>.<span class="hljs-property">consent_form</span>.<span class="title function_">reset</span>();</span></span><br><span class="line"><span class="hljs-language-javascript">            <span class="variable language_">document</span>.<span class="hljs-property">consent_form</span>.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="hljs-language-javascript">        }</span></span><br><span class="line"><span class="hljs-language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 500px;height: 600px;margin: 100px auto"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"text-align: center"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"${clientName}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>希望获得以下许可：<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100%;height: 500px;border: #cccccc 1px solid;border-radius: 10px"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"consent_form"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/oauth2/authorize"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"client_id"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"${clientId}"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"state"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"${state}"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">"scope: ${scopes}"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group form-check py-1"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"margin-left: 5%"</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-check-input"</span></span></span><br><span class="line"><span class="hljs-tag">                       <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span></span></span><br><span class="line"><span class="hljs-tag">                       <span class="hljs-attr">name</span>=<span class="hljs-string">"scope"</span></span></span><br><span class="line"><span class="hljs-tag">                       <span class="hljs-attr">th:value</span>=<span class="hljs-string">"${scope.scope}"</span></span></span><br><span class="line"><span class="hljs-tag">                       <span class="hljs-attr">th:id</span>=<span class="hljs-string">"${scope.scope}"</span></span></span><br><span class="line"><span class="hljs-tag">                       <span class="hljs-attr">checked</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-check-label font-weight-bold"</span> <span class="hljs-attr">th:for</span>=<span class="hljs-string">"${scope.scope}"</span></span></span><br><span class="line"><span class="hljs-tag">                       <span class="hljs-attr">th:text</span>=<span class="hljs-string">"${scope.scope}=='profile'?(${scope.description}+'('+${principalName}+')'):${scope.description}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 90%"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"margin-left: 5%"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"${clientName}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>尚未安装在您有权访问的任何账户上。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 90%"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group pt-3"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100%;height: 80px;"</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary btn-lg"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"submit-consent"</span>&gt;</span></span><br><span class="line">                    授权同意</span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary btn-lg"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cancel-consent"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"cancelConsent();"</span>&gt;</span></span><br><span class="line">                    取消</span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"margin-top: 5px;width: 100%;height: 50px"</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"text-align: center;font-size: 14px"</span>&gt;</span>授权将重定向到<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"text-align: center;font-size: 14px"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"${redirectUri}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="访问授权页面"><a href="#访问授权页面" class="headerlink" title="访问授权页面"></a>访问授权页面</h4><p>启动服务后，我们将发起一个授权请求，<em><a href="http://localhost:8080/oauth2/authorize?response_type=code&amp;client_id=relive-client&amp;scope=message.write%20message.read%20profile&amp;state=some-state&amp;redirect_uri=http://127.0.0.1:8070/login/oauth2/code/messaging-client-authorization-code">http://localhost:8080/oauth2/authorize?response_type=code&amp;client_id=relive-client&amp;scope=message.write%20message.read%20profile&amp;state=some-state&amp;redirect_uri=http://127.0.0.1:8070/login/oauth2/code/messaging-client-authorization-code</a></em>，在认证成功后，我们可以看到以下我们定义的授权同意页面：</p><p><img src="/2022/06/28/custom-oauth2-consent-page/custom-page.png"></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>与往常一样，本文中使用的源代码可<a href="https://github.com/ReLive27/spring-security-oauth2-sample/tree/main/oauth2-custom-consent-authorizationserver">在 GitHub 上</a>获得。</p></body></html>]]></content>
    
    
    <summary type="html">&lt;!-- custom oauth2 consent page --&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="SpringSecurity" scheme="https://relive27.github.io/categories/SpringSecurity/"/>
    
    
    <category term="spring security" scheme="https://relive27.github.io/tags/spring-security/"/>
    
    <category term="OAuth2" scheme="https://relive27.github.io/tags/OAuth2/"/>
    
  </entry>
  
  <entry>
    <title>将JWT与Spring Security OAuth2结合使用</title>
    <link href="https://relive27.github.io/2022/06/26/spring-security-oauth2-jwt/"/>
    <id>https://relive27.github.io/2022/06/26/spring-security-oauth2-jwt/</id>
    <published>2022-06-26T07:58:00.000Z</published>
    <updated>2022-06-26T09:25:01.392Z</updated>
    
    <content type="html"><![CDATA[<!-- spring security oauth2 jwt --><html><head></head><body><span id="more"></span><h2 id="将JWT与Spring-Security-OAuth2结合使用"><a href="#将JWT与Spring-Security-OAuth2结合使用" class="headerlink" title="将JWT与Spring Security OAuth2结合使用"></a>将JWT与Spring Security OAuth2结合使用</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>OAuth 2.0 是行业标准的授权协议。OAuth 2.0 专注于客户端开发人员的简单性，同时为 Web 应用程序、桌面应用程序、移动电话和客厅设备提供特定的授权流程。</p><p>OAuth 授权服务器负责对用户进行身份验证并发布包含用户数据和适当访问策略的访问令牌。</p><p>下面我们将使用<a href="https://spring.io/projects/spring-authorization-server#learn">Spring Authorization Server</a>构建一个简单的授权服务器。</p><h3 id="OAuth2授权服务器实现"><a href="#OAuth2授权服务器实现" class="headerlink" title="OAuth2授权服务器实现"></a>OAuth2授权服务器实现</h3><p>让我们从OAuth2授权服务器配置实现开始。</p><h4 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h4><figure class="highlight xml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-oauth2-authorization-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>首先让我们通过application.yml配置数据库连接信息.</p><figure class="highlight yml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">spring:</span></span><br><span class="line">  <span class="hljs-attr">application:</span></span><br><span class="line">    <span class="hljs-attr">name:</span> <span class="hljs-string">auth-server</span></span><br><span class="line">  <span class="hljs-attr">datasource:</span></span><br><span class="line">    <span class="hljs-attr">druid:</span></span><br><span class="line">      <span class="hljs-attr">db-type:</span> <span class="hljs-string">mysql</span></span><br><span class="line">      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/integrated_oauth?createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">      <span class="hljs-attr">username:</span> <span class="hljs-string">&lt;&lt;username&gt;&gt;</span> <span class="hljs-comment"># 修改用户名</span></span><br><span class="line">      <span class="hljs-attr">password:</span> <span class="hljs-string">&lt;&lt;password&gt;&gt;</span> <span class="hljs-comment"># 修改密码</span></span><br></pre></td></tr></tbody></table></figure><p>之后我们创建一个<code>AuthorizationServerConfig</code>配置类，在此类中我们将创建OAuth2授权服务器所需特定的Bean。第一个将是客户端服务存储库，我们使用<em>RegisteredClient</em>构建器类型创建一个客户端，并将它持久化到数据库中。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line">   <span class="hljs-keyword">public</span> RegisteredClientRepository <span class="title function_">registeredClientRepository</span><span class="hljs-params">(JdbcTemplate jdbcTemplate)</span> {</span><br><span class="line">       <span class="hljs-type">RegisteredClient</span> <span class="hljs-variable">registeredClient</span> <span class="hljs-operator">=</span> RegisteredClient.withId(UUID.randomUUID().toString())</span><br><span class="line">               .clientId(<span class="hljs-string">"relive-client"</span>)</span><br><span class="line">               .clientSecret(<span class="hljs-string">"{noop}relive-client"</span>)</span><br><span class="line">               .clientAuthenticationMethods(s -&gt; {</span><br><span class="line">                   s.add(ClientAuthenticationMethod.CLIENT_SECRET_POST);</span><br><span class="line">                   s.add(ClientAuthenticationMethod.CLIENT_SECRET_BASIC);</span><br><span class="line">               })</span><br><span class="line">               .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)</span><br><span class="line">               .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)</span><br><span class="line">               .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)</span><br><span class="line">               .authorizationGrantType(AuthorizationGrantType.PASSWORD)</span><br><span class="line">               .redirectUri(<span class="hljs-string">"http://127.0.0.1:8070/login/oauth2/code/messaging-client-authorization-code"</span>)</span><br><span class="line">               .scope(<span class="hljs-string">"message.read"</span>)</span><br><span class="line">               .clientSettings(ClientSettings.builder()</span><br><span class="line">                       .requireAuthorizationConsent(<span class="hljs-literal">true</span>)</span><br><span class="line">                       .requireProofKey(<span class="hljs-literal">false</span>)</span><br><span class="line">                       .build())</span><br><span class="line">               .tokenSettings(TokenSettings.builder()</span><br><span class="line">                       .idTokenSignatureAlgorithm(SignatureAlgorithm.RS256)</span><br><span class="line">                       .accessTokenTimeToLive(Duration.ofSeconds(<span class="hljs-number">30</span> * <span class="hljs-number">60</span>))</span><br><span class="line">                       .refreshTokenTimeToLive(Duration.ofSeconds(<span class="hljs-number">60</span> * <span class="hljs-number">60</span>))</span><br><span class="line">                       .reuseRefreshTokens(<span class="hljs-literal">true</span>)</span><br><span class="line">                       .build())</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       <span class="hljs-type">JdbcRegisteredClientRepository</span> <span class="hljs-variable">registeredClientRepository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">JdbcRegisteredClientRepository</span>(jdbcTemplate);</span><br><span class="line">       registeredClientRepository.save(registeredClient);</span><br><span class="line"></span><br><span class="line">       <span class="hljs-keyword">return</span> registeredClientRepository;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>我们配置的属性是：</p><ul><li><p>id–Registeredclient唯一标识</p></li><li><p>clentId–客户端标识符</p></li><li><p>clientSecret–客户端秘密</p></li><li><p>clientAuthenticationMethods–客户端可能使用的身份验证方法。支持的值为<code>client_secret_basic</code>、<code>client_secret_post</code>、<code>private_key_jwt</code>、<code>client_secret_jwt</code>和<code>none</code></p></li><li><p>authorizationGrantTypes–客户端可以使用的授权类型。支持的值为<code>authorization_code</code>、<code>client_credentials</code>和<code>refresh_token</code></p></li><li><p>redirectUris–客户端已注册重定向 URI</p></li><li><p>scopes–允许客户端请求的范围。</p></li><li><p>clientSettings–客户端的自定义设置</p></li><li><p>tokenSettings–发布给客户端的 OAuth2 令牌的自定义设置</p></li></ul><br><p>接下来让我们配置存储新授权和查询现有授权的中心组件OAuth2AuthorizationService。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"> <span class="hljs-keyword">public</span> OAuth2AuthorizationService <span class="title function_">authorizationService</span><span class="hljs-params">(JdbcTemplate jdbcTemplate, RegisteredClientRepository registeredClientRepository)</span> {</span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">JdbcOAuth2AuthorizationService</span>(jdbcTemplate, registeredClientRepository);</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>针对OAuth2 授权请求的授权“同意”，Spring提供了<em>OAuth2AuthorizationConsentService</em>存储新授权同意和查询现有授权同意的组件。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"> <span class="hljs-keyword">public</span> OAuth2AuthorizationConsentService <span class="title function_">authorizationConsentService</span><span class="hljs-params">(JdbcTemplate jdbcTemplate, RegisteredClientRepository registeredClientRepository)</span> {</span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">JdbcOAuth2AuthorizationConsentService</span>(jdbcTemplate, registeredClientRepository);</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>接下来让我们创建一个bean，配置OAuth2授权服务其他默认配置，并以用来对与未认证的授权请求，将该请求重定向到登录页面。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"> <span class="hljs-meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"> <span class="hljs-keyword">public</span> SecurityFilterChain <span class="title function_">authorizationServerSecurityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception {</span><br><span class="line">     OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);</span><br><span class="line">     <span class="hljs-keyword">return</span> http.exceptionHandling(exceptions -&gt; exceptions.</span><br><span class="line">             authenticationEntryPoint(<span class="hljs-keyword">new</span> <span class="title class_">LoginUrlAuthenticationEntryPoint</span>(<span class="hljs-string">"/login"</span>))).build();</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>每个授权服务器都需要用于令牌的签名密钥，让我们生成一个RSA密钥：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="title class_">KeyGeneratorUtils</span> {</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="title function_">KeyGeneratorUtils</span><span class="hljs-params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">static</span> KeyPair <span class="title function_">generateRsaKey</span><span class="hljs-params">()</span> {</span><br><span class="line">        KeyPair keyPair;</span><br><span class="line">        <span class="hljs-keyword">try</span> {</span><br><span class="line">            <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">"RSA"</span>);</span><br><span class="line">            keyPairGenerator.initialize(<span class="hljs-number">2048</span>);</span><br><span class="line">            keyPair = keyPairGenerator.generateKeyPair();</span><br><span class="line">        } <span class="hljs-keyword">catch</span> (Exception ex) {</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">        }</span><br><span class="line">        <span class="hljs-keyword">return</span> keyPair;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="title class_">Jwks</span> {</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">private</span> <span class="title function_">Jwks</span><span class="hljs-params">()</span> {</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RSAKey <span class="title function_">generateRsa</span><span class="hljs-params">()</span> {</span><br><span class="line"><span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> KeyGeneratorUtils.generateRsaKey();</span><br><span class="line"><span class="hljs-type">RSAPublicKey</span> <span class="hljs-variable">publicKey</span> <span class="hljs-operator">=</span> (RSAPublicKey) keyPair.getPublic();</span><br><span class="line"><span class="hljs-type">RSAPrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> (RSAPrivateKey) keyPair.getPrivate();</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">RSAKey</span>.Builder(publicKey)</span><br><span class="line">.privateKey(privateKey)</span><br><span class="line">.keyID(UUID.randomUUID().toString())</span><br><span class="line">.build();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line">   <span class="hljs-keyword">public</span> JWKSource&lt;SecurityContext&gt; <span class="title function_">jwkSource</span><span class="hljs-params">()</span> {</span><br><span class="line">       <span class="hljs-type">RSAKey</span> <span class="hljs-variable">rsaKey</span> <span class="hljs-operator">=</span> Jwks.generateRsa();</span><br><span class="line">       <span class="hljs-type">JWKSet</span> <span class="hljs-variable">jwkSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">JWKSet</span>(rsaKey);</span><br><span class="line">       <span class="hljs-keyword">return</span> (jwkSelector, securityContext) -&gt; jwkSelector.select(jwkSet);</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>处理完令牌的签名密钥，授权服务器还需要一个颁发者URL，我们可以通过<em>ProviderSettings</em>创建：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line"><span class="hljs-keyword">public</span> ProviderSettings <span class="title function_">providerSettings</span><span class="hljs-params">()</span> {</span><br><span class="line">    <span class="hljs-keyword">return</span> ProviderSettings.builder()</span><br><span class="line">            .issuer(<span class="hljs-string">"http://127.0.0.1:8080"</span>)</span><br><span class="line">            .build();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>最后我们将启用Spring Security安全配置类，以保护我们的服务。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@EnableWebSecurity</span></span><br><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">DefaultSecurityConfig</span> {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    SecurityFilterChain <span class="title function_">defaultSecurityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception {</span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests(authorizeRequests -&gt;</span><br><span class="line">                        authorizeRequests.anyRequest().authenticated()</span><br><span class="line">                )</span><br><span class="line">                .formLogin(withDefaults())</span><br><span class="line">        <span class="hljs-keyword">return</span> http.build();</span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-comment">//...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里<em>authorizeRequests</em>.<em>anyRequest()</em>.<em>authenticated</em>()让所有请求都需要认证，并提供基于Form表单的身份认证。</p><br><p>我们还需要定义测试使用的用户信息，以下创建一个基于内存的用户信息存储库。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line">UserDetailsService <span class="title function_">users</span><span class="hljs-params">()</span> {</span><br><span class="line">    <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> User.withDefaultPasswordEncoder()</span><br><span class="line">            .username(<span class="hljs-string">"admin"</span>)</span><br><span class="line">            .password(<span class="hljs-string">"password"</span>)</span><br><span class="line">            .roles(<span class="hljs-string">"USER"</span>)</span><br><span class="line">            .build();</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>(user);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="资源服务器实现"><a href="#资源服务器实现" class="headerlink" title="资源服务器实现"></a>资源服务器实现</h3><p>现在我们将创建一个资源服务器，服务中的API接口只允许通过OAuth2授权服务器身份验证的请求。</p><h4 id="maven依赖-1"><a href="#maven依赖-1" class="headerlink" title="maven依赖"></a>maven依赖</h4><figure class="highlight xml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-resource-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>首先让我们通过application.yml配置服务端口。</p><figure class="highlight yml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">server:</span></span><br><span class="line">  <span class="hljs-attr">port:</span> <span class="hljs-number">8090</span></span><br></pre></td></tr></tbody></table></figure><p>接下来，进行OAuth2安全配置，我们需要使用之前授权服务器在<em>ProviderSettings</em>中设置的issuerUri。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  security:</span><br><span class="line">    oauth2:</span><br><span class="line">      resourceserver:</span><br><span class="line">        jwt:</span><br><span class="line">          issuer-uri: http:<span class="hljs-comment">//127.0.0.1:8080</span></span><br></pre></td></tr></tbody></table></figure><p>资源服务器将使用此Uri进一步进行自我配置，发现授权服务器的公钥，并传入用于验证JWT的JwtDecoder。此过程的结果是授权服务器必须启动并接收请求才能使资源服务器成功启动。</p><br><p>如果资源服务器必须能够独立于授权服务器启动，那么可以提供<code>jwk-set-uri</code>。这将是我们进一步在OAuth2安全配置中添加属性：</p><figure class="highlight yml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">spring:</span></span><br><span class="line">  <span class="hljs-attr">security:</span></span><br><span class="line">    <span class="hljs-attr">oauth2:</span></span><br><span class="line">      <span class="hljs-attr">resourceserver:</span></span><br><span class="line">        <span class="hljs-attr">jwt:</span></span><br><span class="line">          <span class="hljs-attr">issuer-uri:</span> <span class="hljs-string">http://127.0.0.1:8080</span></span><br><span class="line">          <span class="hljs-attr">jwk-set-uri:</span> <span class="hljs-string">http://127.0.0.1:8080/oauth2/jwks</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>现在我们可以设置Spring Security安全配置，对服务资源的每个请求都应该被授权并具有适当的权限：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@EnableWebSecurity</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">ResourceServerConfig</span> {</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception {</span><br><span class="line">        http.requestMatchers()</span><br><span class="line">                .antMatchers(<span class="hljs-string">"/resource/test/**"</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .mvcMatchers(<span class="hljs-string">"/resource/test/**"</span>)</span><br><span class="line">                .access(<span class="hljs-string">"hasAuthority('SCOPE_message.read')"</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .oauth2ResourceServer()</span><br><span class="line">                .jwt();</span><br><span class="line">        <span class="hljs-keyword">return</span> http.build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><p>最后，我们将创建一个 REST 控制器，它将返回jwt的claims信息。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">ResourceServerTestController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@GetMapping("/resource/test")</span></span><br><span class="line">    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getArticles</span><span class="hljs-params">(<span class="hljs-meta">@AuthenticationPrincipal</span> Jwt jwt)</span> {</span><br><span class="line">        <span class="hljs-keyword">return</span> jwt.getClaims();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="OAuth2客户端"><a href="#OAuth2客户端" class="headerlink" title="OAuth2客户端"></a>OAuth2客户端</h3><p>现在我们要创建一个客户端，它首先向授权服务器请求授权获取访问令牌，在访问资源服务器对应资源。</p><h4 id="maven依赖-2"><a href="#maven依赖-2" class="headerlink" title="maven依赖"></a>maven依赖</h4><figure class="highlight xml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webflux<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><p>首先我们将要在application.yml中配置客户端的访问端口8070。</p><figure class="highlight yml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">server:</span></span><br><span class="line">  <span class="hljs-attr">port:</span> <span class="hljs-number">8070</span></span><br></pre></td></tr></tbody></table></figure><p>接下来我们将定义OAuth2客户端的配置属性：</p><figure class="highlight yaml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">spring:</span></span><br><span class="line">  <span class="hljs-attr">security:</span></span><br><span class="line">    <span class="hljs-attr">oauth2:</span></span><br><span class="line">      <span class="hljs-attr">client:</span></span><br><span class="line">        <span class="hljs-attr">registration:</span></span><br><span class="line">          <span class="hljs-attr">messaging-client-authorization-code:</span></span><br><span class="line">            <span class="hljs-attr">provider:</span> <span class="hljs-string">client-provider</span></span><br><span class="line">            <span class="hljs-attr">client-id:</span> <span class="hljs-string">relive-client</span></span><br><span class="line">            <span class="hljs-attr">client-secret:</span> <span class="hljs-string">relive-client</span></span><br><span class="line">            <span class="hljs-attr">authorization-grant-type:</span> <span class="hljs-string">authorization_code</span></span><br><span class="line">            <span class="hljs-attr">redirect-uri:</span> <span class="hljs-string">"http://127.0.0.1:8070/login/oauth2/code/{registrationId}"</span></span><br><span class="line">            <span class="hljs-attr">scope:</span> <span class="hljs-string">message.read</span></span><br><span class="line">            <span class="hljs-attr">client-name:</span> <span class="hljs-string">messaging-client-authorization-code</span></span><br><span class="line">        <span class="hljs-attr">provider:</span></span><br><span class="line">          <span class="hljs-attr">client-provider:</span></span><br><span class="line">            <span class="hljs-attr">authorization-uri:</span> <span class="hljs-string">http://127.0.0.1:8080/oauth2/authorize</span></span><br><span class="line">            <span class="hljs-attr">token-uri:</span> <span class="hljs-string">http://127.0.0.1:8080/oauth2/token</span></span><br></pre></td></tr></tbody></table></figure><p>现在让我们创建一个WebClient实例用于向资源服务器执行HTTP请求：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line">  WebClient <span class="title function_">webClient</span><span class="hljs-params">(OAuth2AuthorizedClientManager authorizedClientManager)</span> {</span><br><span class="line">      <span class="hljs-type">ServletOAuth2AuthorizedClientExchangeFilterFunction</span> <span class="hljs-variable">oauth2Client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">ServletOAuth2AuthorizedClientExchangeFilterFunction</span>(authorizedClientManager);</span><br><span class="line">      <span class="hljs-keyword">return</span> WebClient.builder()</span><br><span class="line">              .apply(oauth2Client.oauth2Configuration())</span><br><span class="line">              .build();</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>WebClient添加了一个OAuth2授权过滤器，需要OAuth2AuthorizedClientManager作为依赖项，在此处只配置了授权码和刷新token，如有需要可以添加其他模式：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line">    OAuth2AuthorizedClientManager <span class="title function_">authorizedClientManager</span><span class="hljs-params">(ClientRegistrationRepository clientRegistrationRepository,</span></span><br><span class="line"><span class="hljs-params">                                                          OAuth2AuthorizedClientRepository authorizedClientRepository)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">//可以扩展其他模式</span></span><br><span class="line">        <span class="hljs-type">OAuth2AuthorizedClientProvider</span> <span class="hljs-variable">authorizedClientProvider</span> <span class="hljs-operator">=</span> OAuth2AuthorizedClientProviderBuilder</span><br><span class="line">                .builder()</span><br><span class="line">                .authorizationCode()</span><br><span class="line">                .refreshToken()</span><br><span class="line">                .build();</span><br><span class="line">        <span class="hljs-type">DefaultOAuth2AuthorizedClientManager</span> <span class="hljs-variable">authorizedClientManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">DefaultOAuth2AuthorizedClientManager</span>(clientRegistrationRepository, authorizedClientRepository);</span><br><span class="line">        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> authorizedClientManager;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>最后，我们将配置Spring Security安全配置：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Bean</span></span><br><span class="line">   SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception {</span><br><span class="line">       http</span><br><span class="line">               .authorizeRequests(authorizeRequests -&gt;</span><br><span class="line">                       <span class="hljs-comment">//便于测试，将权限开放</span></span><br><span class="line">                       authorizeRequests.anyRequest().permitAll()</span><br><span class="line">               )</span><br><span class="line">               .oauth2Client(withDefaults());</span><br><span class="line">       <span class="hljs-keyword">return</span> http.build();</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>这里我们将客户端API权限全部放开，但是在实际情况下，客户端服务是需要认证的，OAuth2协议本身是授权协议，并不关心认证的具体表现形式，你也可以向授权服务器一样添加简单的<em>表单认证</em>。</p><h4 id="访问资源列表"><a href="#访问资源列表" class="headerlink" title="访问资源列表"></a>访问资源列表</h4><p>最后，我们创建一个控制器，我们将使用之前配置的WebClient向我们资源服务器发起HTTP请求：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RestController</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">ClientTestController</span> {</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> WebClient webClient;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@GetMapping(value = "/client/test")</span></span><br><span class="line">    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getArticles</span><span class="hljs-params">(<span class="hljs-meta">@RegisteredOAuth2AuthorizedClient("messaging-client-authorization-code")</span> OAuth2AuthorizedClient authorizedClient)</span> {</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.webClient</span><br><span class="line">                .get()</span><br><span class="line">                .uri(<span class="hljs-string">"http://127.0.0.1:8090/resource/test"</span>)</span><br><span class="line">                .attributes(oauth2AuthorizedClient(authorizedClient))</span><br><span class="line">                .retrieve()</span><br><span class="line">                .bodyToMono(Map.class)</span><br><span class="line">                .block();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面示例中，我们使用@<em>RegisteredOAuth2AuthorizedClient</em>注解绑定<em>OAuth2AuthorizedClient</em>，并以触发OAuth2授权码模式流程获取访问令牌。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>本例主要演示在使用OAuth2进行两个服务安全通信，尤其是在复杂的互联网场景中，客户端服务和资源服务恰好由不同的平台提供，OAuth2非常善于获取用户的委托决策，很多方面他都比其他方案更简单，更安全。<br></p><p>与往常一样，本文中使用的源代码可<a href="https://github.com/ReLive27/spring-security-oauth2-sample/tree/main/oauth2-jwt">在 GitHub 上</a>获得。</p></body></html>]]></content>
    
    
    <summary type="html">&lt;!-- spring security oauth2 jwt --&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="SpringSecurity" scheme="https://relive27.github.io/categories/SpringSecurity/"/>
    
    
    <category term="spring security" scheme="https://relive27.github.io/tags/spring-security/"/>
    
    <category term="OAuth2" scheme="https://relive27.github.io/tags/OAuth2/"/>
    
    <category term="JWT" scheme="https://relive27.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>SpringGateway使用SpringSecurity防止CSRF攻击</title>
    <link href="https://relive27.github.io/2022/06/22/spring-gateway-csrf/"/>
    <id>https://relive27.github.io/2022/06/22/spring-gateway-csrf/</id>
    <published>2022-06-22T10:49:48.000Z</published>
    <updated>2022-06-22T10:53:32.926Z</updated>
    
    <content type="html"><![CDATA[<!-- spring gateway csrf --><html><head></head><body><span id="more"></span><h2 id="SpringGateway使用SpringSecurity防止CSRF攻击"><a href="#SpringGateway使用SpringSecurity防止CSRF攻击" class="headerlink" title="SpringGateway使用SpringSecurity防止CSRF攻击"></a>SpringGateway使用SpringSecurity防止CSRF攻击</h2><h3 id="配置CSRF保护"><a href="#配置CSRF保护" class="headerlink" title="配置CSRF保护"></a>配置CSRF保护</h3><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {</span><br><span class="line">http</span><br><span class="line">.csrf(csrf -&gt; csrf.csrfTokenRepository(CookieServerCsrfTokenRepository.withHttpOnlyFalse()))</span><br><span class="line">return http.build();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以上通过Cookie持久化<code>XSRF-TOKEN</code>值，jS读取cookie中的值发起请求时需携带<code>X-XSRF-TOKEN</code><br>请求头，默认情况GET，HEAD，TRACE，OPTIONS请求方式是放行的，具体实现在<code>DefaultRequireCsrfProtectionMatcher</code><br>类。如果需要特殊定制，可以自定义实现类实现<code>ServerWebExchangeMatcher</code>,并替换默认<code>DefaultRequireCsrfProtectionMatcher</code>:</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">  public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {</span><br><span class="line">      http</span><br><span class="line">              .csrf(csrf -&gt; csrf.csrfTokenRepository(CookieServerCsrfTokenRepository.withHttpOnlyFalse())</span><br><span class="line">                      .requireCsrfProtectionMatcher(new CustomServerWebExchangeMatcher());</span><br><span class="line">      return http.build();</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><h3 id="CookieServerCsrfTokenRepository-does-not-add-cookie"><a href="#CookieServerCsrfTokenRepository-does-not-add-cookie" class="headerlink" title="CookieServerCsrfTokenRepository does not add cookie"></a>CookieServerCsrfTokenRepository does not add cookie</h3><p>在我们按照上述配置分别测试GET请求和POST请求时，发现GET请求响应cookie中并没有<code>XSRF-TOKEN</code>，原因在响应式编程中<code>CsrfToken</code><br>并没有被订阅。具体问题解析在<a href="https://github.com/spring-projects/spring-security/issues/5766">Spring Security issues中找到答案</a>；<br>最后也提供了解决方式：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class CsrfHelperFilter implements WebFilter {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, WebFilterChain chain) {</span><br><span class="line">        String key = CsrfToken.class.getName();</span><br><span class="line">        Mono&lt;CsrfToken&gt; csrfToken = null != exchange.getAttribute(key) ? exchange.getAttribute(key) : Mono.empty();</span><br><span class="line">        return csrfToken.doOnSuccess(token -&gt; {</span><br><span class="line">            ResponseCookie cookie = ResponseCookie.from("XSRF-TOKEN", token.getToken()).maxAge(Duration.ofHours(1))</span><br><span class="line">                    .httpOnly(false).path("/").build();</span><br><span class="line">            log.debug("Cookie: {}", cookie);</span><br><span class="line">            exchange.getResponse().getCookies().add("XSRF-TOKEN", cookie);</span><br><span class="line">        }).then(chain.filter(exchange));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>与往常一样，本文中使用的源代码可<a href="https://github.com/ReLive27/spring-cloud-sample/tree/master/spring-cloud-gateway-sample/spring-cloud-gateway-csrf">在 GitHub 上</a>获得。</p></body></html>]]></content>
    
    
    <summary type="html">&lt;!-- spring gateway csrf --&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="SpringCloud" scheme="https://relive27.github.io/categories/SpringCloud/"/>
    
    
    <category term="spring cloud" scheme="https://relive27.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>Java Weekly 第1期</title>
    <link href="https://relive27.github.io/2022/06/12/java-weekly-1/"/>
    <id>https://relive27.github.io/2022/06/12/java-weekly-1/</id>
    <published>2022-06-12T09:24:47.000Z</published>
    <updated>2022-06-16T01:19:54.534Z</updated>
    
    <content type="html"><![CDATA[<!-- java weekly 1--><html><head></head><body><span id="more"></span><h2 id="精选文章"><a href="#精选文章" class="headerlink" title="精选文章"></a>精选文章</h2><ul><li><p><a href="https://www.baeldung.com/postman-send-csrf-token">&gt;&gt;从 Postman REST 客户端发送 CSRF 令牌 [baeldung.com]</a></p></li><li><p><a href="https://medium.com/@onyalioscar/implementing-2-way-ssl-and-acl-authentication-for-kafka-with-spring-boot-client-configuration-90221cda046b">&gt;&gt;使用 Spring Boot 客户端配置为 Kafka 实现 2 路 SSL 和 ACL 身份验证 [medium.com]</a></p></li><li><p><a href="https://medium.com/javarevisited/the-java-programmer-roadmap-f9db163ef2c2">2022 Java 程序员路线图 [medium.com]</a></p></li></ul><h2 id="技术-amp-思考"><a href="#技术-amp-思考" class="headerlink" title="技术&amp;思考"></a>技术&amp;思考</h2><ul><li><a href="https://medium.com/@AxelDietrichDev/10-things-i-would-have-liked-to-know-when-i-started-working-as-a-software-engineer-8c4401fcdedf">&gt;&gt;当我开始担任软件工程师时，我想知道的 10 件事 [medium.com]</a></li></ul></body></html>]]></content>
    
    
    <summary type="html">&lt;!-- java weekly 1--&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="weekly" scheme="https://relive27.github.io/categories/weekly/"/>
    
    
  </entry>
  
  <entry>
    <title>Mybatis-plus遇到MySQL关键字如何解决</title>
    <link href="https://relive27.github.io/2022/05/18/mybatis-mysql-keyword/"/>
    <id>https://relive27.github.io/2022/05/18/mybatis-mysql-keyword/</id>
    <published>2022-05-18T09:33:52.000Z</published>
    <updated>2022-07-21T12:06:59.090Z</updated>
    
    <content type="html"><![CDATA[<!-- mybatis--><html><head></head><body><span id="more"></span><h2 id="Mybatis-plus遇到MySQL关键字如何解决"><a href="#Mybatis-plus遇到MySQL关键字如何解决" class="headerlink" title="Mybatis-plus遇到MySQL关键字如何解决"></a>Mybatis-plus遇到MySQL关键字如何解决</h2><p>在我们开发中经常会遇到在实体类中某个字段是MySQL的关键字，例如：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@TableName</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">  <span class="hljs-keyword">private</span> Long id;</span><br><span class="line">  <span class="hljs-keyword">private</span> String username;</span><br><span class="line">  <span class="hljs-keyword">private</span> String describe;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在我们使用Mybatis查询是会遇到报错，提示信息：</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'describe from user' at line 1, Time: 0.009000s</span><br></pre></td></tr></tbody></table></figure><p>这是因为Mybatis在执行sql时并没有将查询字段并没有通过间隔号，所以MySQL会把describe当作关键字。</p><p>首先遇到这种情况，一我们可以更改字段名避免使用MySQL的关键字；二如果字段名不方便修改，那么我们可以使用<code>@TableField</code>显示的将字段使用间隔号。修改后实体类如下：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@TableName</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">  <span class="hljs-keyword">private</span> Long id;</span><br><span class="line">  <span class="hljs-keyword">private</span> String username;</span><br><span class="line">  <span class="hljs-meta">@TableName("`describe`")</span></span><br><span class="line">  <span class="hljs-keyword">private</span> String describe;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    
    <summary type="html">&lt;!-- mybatis--&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="Mybatis" scheme="https://relive27.github.io/categories/Mybatis/"/>
    
    
    <category term="mybatis" scheme="https://relive27.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-工厂方法模式</title>
    <link href="https://relive27.github.io/2022/05/15/factory-pattern/"/>
    <id>https://relive27.github.io/2022/05/15/factory-pattern/</id>
    <published>2022-05-15T12:24:52.000Z</published>
    <updated>2022-06-14T04:33:25.412Z</updated>
    
    <content type="html"><![CDATA[<!--factory--><html><head></head><body><span id="more"></span><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>工厂方法模式使用的频率非常高，在日常开发中经常会使用，其定义为：</p><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。</p><p>通用类图如下：</p><p><img src="/2022/05/15/factory-pattern/factory-pattern.png"></p><p>工厂方法模式中，抽象产品类定义产品的共性；Factory为抽象创建类，也就是抽象工厂。代码如下：</p><p>抽象产品类代码：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="title class_">Product</span> {</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//产品类的公共方法</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="title function_">method1</span><span class="hljs-params">()</span>{</span><br><span class="line">        <span class="hljs-comment">//doSomething</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="title function_">method2</span><span class="hljs-params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>具体产品类可以有多个，都继承与抽象产品类，代码如下：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">ConcreteProduct1</span>  <span class="hljs-keyword">extends</span> <span class="title class_">Product</span>{</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="title function_">method2</span><span class="hljs-params">()</span> {</span><br><span class="line">        System.out.println(<span class="hljs-string">"具体产品类1"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">ConcreteProduct2</span>  <span class="hljs-keyword">extends</span> <span class="title class_">Product</span>{</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="title function_">method2</span><span class="hljs-params">()</span> {</span><br><span class="line">        System.out.println(<span class="hljs-string">"具体产品类2"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>抽象工厂类负责定义产品对象产生，代码如下：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="title class_">ProductFactory</span> {</span><br><span class="line"><span class="hljs-comment">//创建一个产品类对象，参数可以自行设置</span></span><br><span class="line">    &lt;T <span class="hljs-keyword">extends</span> <span class="title class_">Product</span>&gt; T <span class="title function_">createProduct</span><span class="hljs-params">(Class&lt;T&gt; clazz)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>具体如何产生一个产品的对象，由具体的工厂类实现，代码如下：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">ConcreteProductFactory</span> <span class="hljs-keyword">implements</span> <span class="title class_">ProductFactory</span> {</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-keyword">public</span> &lt;T <span class="hljs-keyword">extends</span> <span class="title class_">Product</span>&gt; T <span class="title function_">createProduct</span><span class="hljs-params">(Class&lt;T&gt; clazz)</span> {</span><br><span class="line">        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;</span><br><span class="line">        <span class="hljs-keyword">try</span> {</span><br><span class="line">            product = (Product) Class.forName(clazz.getName()).newInstance();</span><br><span class="line">        } <span class="hljs-keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="hljs-comment">//异常处理</span></span><br><span class="line">        }</span><br><span class="line">        <span class="hljs-keyword">return</span> (T) product;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="工厂方法模式优点"><a href="#工厂方法模式优点" class="headerlink" title="工厂方法模式优点"></a>工厂方法模式优点</h3><ul><li>良好的封装性，代码结构清晰。对于客户端隐藏创建对象的复杂过程，降低模块间的耦合。</li><li>扩展性高。在增加产品类的情况下，只要修改具体的工厂类或扩展一个工厂类。</li><li>屏蔽产品类。产品类的实现如何变化，客户端都不需要关心，他只需要关心产品的接口，因为产品类的实例化由工厂类负责。</li><li>工厂方法模式是典型的解耦框架。高层模块只需要知道产品的抽象类，其他实现类都不关心，符合迪米特法则。只依赖产品类的抽象，符合依赖倒置原则。使用产品子类替换产品父类，也符合里氏替换原则。</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>工厂方法模式是new一个对象的替代品，在需要灵活的，可扩展的框架时，可以考虑采用工厂方法模式。例如使用JDBC数据库连接，数据库从MySQL切换到Oracle，需要改动的地方就是切换下驱动名称（前提SQL是标准语句）。</p><h3 id="工厂方法模式的扩展"><a href="#工厂方法模式的扩展" class="headerlink" title="工厂方法模式的扩展"></a>工厂方法模式的扩展</h3><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><p>在工厂方法模式中，我们考虑<strong>一个模块只需要一个工厂类</strong>，根据这一需求，稍微改动下，将抽象工厂类去掉，类图如下：</p><p><img src="/2022/05/15/factory-pattern/factory-pattern(1).png"></p><p>我们去掉Factory抽象类，并把创建createProduct方法设置为静态类型，变更代码如下：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">ConcreteProductFactory</span> {</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-keyword">public</span> &lt;T <span class="hljs-keyword">extends</span> <span class="title class_">Product</span>&gt; T <span class="title function_">createProduct</span><span class="hljs-params">(Class&lt;T&gt; clazz)</span> {</span><br><span class="line">        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;</span><br><span class="line">        <span class="hljs-keyword">try</span> {</span><br><span class="line">            product = (Product) Class.forName(clazz.getName()).newInstance();</span><br><span class="line">        } <span class="hljs-keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="hljs-comment">//异常处理</span></span><br><span class="line">        }</span><br><span class="line">        <span class="hljs-keyword">return</span> (T) product;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>简单工厂模式是工厂模式的弱化，在实际开发中，采用此模式还是比较多的，但是其缺点是工厂类的扩展比较困难，不符合开闭原则。</p><h4 id="多工厂类"><a href="#多工厂类" class="headerlink" title="多工厂类"></a>多工厂类</h4><p>当我们做一个复杂项目时，如果遇到一个对象初始化很耗费精力的情况，那么将所有产品类放到一个工厂方法中会使结构不清晰，例如产品类有5个具体实现，那么此时工厂方法可能会变得巨大无比。</p><p>考虑需要结构清晰，我们就为每个产品类创造一个工厂类，由客户端决定与哪个工厂方法关联。</p><p>多工厂模式的抽象工厂类代码如下：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="title class_">MultiProductFactory</span> {</span><br><span class="line"></span><br><span class="line">    Product <span class="title function_">createProduct</span><span class="hljs-params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>此时抽象方法不需要传递参数，因为每个具体工厂职责已经很明确了，只需要负责创建自己负责的产品类对象。</p><p>产品类1工厂类实现：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">Concrete1MultiProductFactory</span> <span class="hljs-keyword">implements</span> <span class="title class_">MultiProductFactory</span>{</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-keyword">public</span> Product <span class="title function_">createProduct</span><span class="hljs-params">()</span> {</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">ConcreteProduct1</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>产品类2工程类实现：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">Concrete2MultiProductFactory</span> <span class="hljs-keyword">implements</span> <span class="title class_">MultiProductFactory</span> {</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-keyword">public</span> Product <span class="title function_">createProduct</span><span class="hljs-params">()</span> {</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="title class_">ConcreteProduct2</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>此种模式就是创建类职责清晰，但是给扩展性和维护性带来了一定的影响。如果扩展一个产品类，就需要建立相应的工厂类，这样增加了扩展的难度。因为工厂类和产品类数量相同，维护时需要考虑两个对象之间的关系。当然在采用多工厂时，可以增加一个协调类，避免客户端与各个子工厂交流，协调类的作用封装子工厂类，对外提供统一的访问接口。</p><h4 id="延迟初始化"><a href="#延迟初始化" class="headerlink" title="延迟初始化"></a>延迟初始化</h4><p>一个对象消费完毕后，并不立刻释放，工厂类保持其初始状态，等待再次被调用。延迟初始化是工厂方法模式的一个扩展应用。</p><p>工厂类负责对象的创建工作，并通过HashMap产生一个缓存，对需要再次被调用的对象保留，参考代码如下：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">LazyProductFactory</span> {</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Product&gt; map = <span class="hljs-keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Product <span class="title function_">createProduct</span><span class="hljs-params">(String type)</span> {</span><br><span class="line">        Product product;</span><br><span class="line">        <span class="hljs-keyword">if</span> (map.containsKey(type)) {</span><br><span class="line">            product = map.get(type);</span><br><span class="line">        } <span class="hljs-keyword">else</span> {</span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-string">"product1"</span>.equals(type)) {</span><br><span class="line">                product = <span class="hljs-keyword">new</span> <span class="title class_">ConcreteProduct1</span>();</span><br><span class="line">            } <span class="hljs-keyword">else</span> {</span><br><span class="line">                product = <span class="hljs-keyword">new</span> <span class="title class_">ConcreteProduct2</span>();</span><br><span class="line">            }</span><br><span class="line">            map.put(type, product);</span><br><span class="line">        }</span><br><span class="line">        <span class="hljs-keyword">return</span> product;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>实现比较简单，通过定义一个Map容器，缓存所有产生的对象，再次调用时如果Map中已经包含则直接返回，否则根据需要产生一个对象并存Map中。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>与往常一样，本文中使用的源代码可<a href="https://github.com/ReLive27/Java/tree/master/designPatterns/src/main/java/com/relive/factory">在 GitHub 上</a>获得。</p></body></html>]]></content>
    
    
    <summary type="html">&lt;!--factory--&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://relive27.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Java连接SSH</title>
    <link href="https://relive27.github.io/2022/05/15/java-ssh/"/>
    <id>https://relive27.github.io/2022/05/15/java-ssh/</id>
    <published>2022-05-15T09:24:47.000Z</published>
    <updated>2022-05-16T11:57:51.007Z</updated>
    
    <content type="html"><![CDATA[<!--ssh--><html><head></head><body><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://baike.baidu.com/item/ssh/10407?fr=aladdin">SSH</a> 为建立在应用层基础上的安全协议。SSH 是较可靠，专为远程登录会话和其他网络服务提供安全性的协议。</p><h2 id="Jsch"><a href="#Jsch" class="headerlink" title="Jsch"></a>Jsch</h2><p>JSch 是 <a href="http://ietf.org/html.charters/secsh-charter.html">SSH2</a>的纯 Java 实现。JSch 允许你连接到一个 sshd 服务器并使用端口转发、X11 转发、文件传输等，你可以将它的功能集成到你自己的 Java 程序中。</p><p>首先，让我们将<a href="https://mvnrepository.com/artifact/com.jcraft/jsch">JSch Maven 依赖</a>添加到我们的<em>pom.xml</em>文件中：</p><figure class="highlight xml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.jcraft<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.1.55<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>要使用Jsch连接ssh，需要提供<strong>用户名</strong>，<strong>密码</strong>，<strong>主机</strong>，<strong>端口</strong>，以下是简单代码实例：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="title function_">execCommand</span><span class="hljs-params">(String username, String password, String host, Integer port, String command)</span> <span class="hljs-keyword">throws</span> JSchException, InterruptedException {</span><br><span class="line">       <span class="hljs-type">Session</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;</span><br><span class="line">       <span class="hljs-type">ChannelExec</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="hljs-keyword">try</span> {</span><br><span class="line">           session = <span class="hljs-keyword">new</span> <span class="title class_">JSch</span>().getSession(username, host, port);</span><br><span class="line">           session.setPassword(password);</span><br><span class="line">           session.setConfig(<span class="hljs-string">"StrictHostKeyChecking"</span>, <span class="hljs-string">"no"</span>);</span><br><span class="line">           session.connect();</span><br><span class="line"></span><br><span class="line">           channel = (ChannelExec) session.openChannel(<span class="hljs-string">"exec"</span>);</span><br><span class="line">           channel.setCommand(command);</span><br><span class="line">           <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">responseStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">           channel.setOutputStream(responseStream);</span><br><span class="line">           <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">errorResponseStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">           channel.setErrStream(errorResponseStream);</span><br><span class="line">           channel.connect();</span><br><span class="line"></span><br><span class="line">           <span class="hljs-keyword">while</span> (channel.isConnected()) {</span><br><span class="line">               Thread.sleep(<span class="hljs-number">100</span>);</span><br><span class="line">           }</span><br><span class="line"></span><br><span class="line">           <span class="hljs-type">String</span> <span class="hljs-variable">responseString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">String</span>(responseStream.toByteArray(), StandardCharsets.UTF_8);</span><br><span class="line">           <span class="hljs-keyword">if</span> (!responseString.isEmpty()) {</span><br><span class="line">               log.info(responseString);</span><br><span class="line">           }</span><br><span class="line">           <span class="hljs-type">String</span> <span class="hljs-variable">errorResponseString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">String</span>(errorResponseStream.toByteArray(), StandardCharsets.UTF_8);</span><br><span class="line">           <span class="hljs-keyword">if</span> (!errorResponseString.isEmpty()) {</span><br><span class="line">               log.warn(errorResponseString);</span><br><span class="line">           }</span><br><span class="line">       } <span class="hljs-keyword">finally</span> {</span><br><span class="line">           <span class="hljs-keyword">if</span> (session != <span class="hljs-literal">null</span>) {</span><br><span class="line">               session.disconnect();</span><br><span class="line">           }</span><br><span class="line">           <span class="hljs-keyword">if</span> (channel != <span class="hljs-literal">null</span>) {</span><br><span class="line">               channel.disconnect();</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>上述代码中我们首先建立SSH会话，通过会话建立执行通道，执行我们提供的shell命令，并将响应信息和错误响应信息输出到控制台。</p><p><strong>如何使用 JSch 提供的不同配置参数</strong>：</p><ul><li><em>StrictHostKeyChecking</em> - 它指示应用程序是否将检查是否可以在已知主机中找到主机公钥。此外，可用的参数值是<em>ask</em>、<em>yes</em>和<em>no</em>，其中<em>ask</em>是默认值。如果我们将此属性设置为<em>yes</em>，JSch 将永远不会自动将主机密钥添加到<em>known_hosts</em>文件，并且它将拒绝连接到主机密钥已更改的主机。这会强制用户手动添加所有新主机。如果我们将其设置为 <em>no</em>，JSch 会自动将新的主机密钥添加到已知主机列表中</li><li><em>compression.s2c</em> – 指定是否对从服务器到客户端应用程序的数据流使用压缩。可用值为<em>zlib</em>和<em>none</em>，其中第二个是默认值</li><li><em>compression.c2s</em> – 指定是否对客户端-服务器方向的数据流使用压缩。可用值为<em>zlib</em>和<em>none</em>，其中第二个是默认值</li></ul><h2 id="Apache-MINA-SSHD"><a href="#Apache-MINA-SSHD" class="headerlink" title="Apache MINA SSHD"></a>Apache MINA SSHD</h2><p><a href="https://mina.apache.org/sshd-project/">Apache SSHD</a> 是一个 100% 纯 Java 库，支持客户端和服务器端的 SSH 协议。该库基于<a href="http://mina.apache.org/">Apache MINA</a>，这是一个可扩展的高性能异步 IO 库。</p><p>首先，让我们将<a href="https://mvnrepository.com/artifact/org.apache.sshd/sshd-core">sshd Maven 依赖</a>添加到我们的<em>pom.xml</em>文件中：</p><figure class="highlight xml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.sshd<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sshd-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="执行-1"><a href="#执行-1" class="headerlink" title="执行"></a>执行</h3><p>同样，建立ssh连接需要提供<strong>用户名</strong>，<strong>密码</strong>，<strong>主机地址</strong>，<strong>端口</strong>，除此之外，sshd可以设置<strong>连接超时时间</strong>，以下提供简单的代码示例：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="title function_">execCommand</span><span class="hljs-params">(String username, String password, String host, Integer port, Integer defaultTimeoutSeconds, String command)</span> <span class="hljs-keyword">throws</span> IOException {</span><br><span class="line">       <span class="hljs-type">SshClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> SshClient.setUpDefaultClient();</span><br><span class="line">       client.start();</span><br><span class="line">       <span class="hljs-keyword">try</span> (<span class="hljs-type">ClientSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> client.connect(username, host, port)</span><br><span class="line">               .verify(defaultTimeoutSeconds, TimeUnit.SECONDS)</span><br><span class="line">               .getSession()) {</span><br><span class="line">           session.addPasswordIdentity(password);</span><br><span class="line">           session.auth().verify(defaultTimeoutSeconds, TimeUnit.SECONDS);</span><br><span class="line">           <span class="hljs-keyword">try</span> (<span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">responseStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">errorResponseStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                <span class="hljs-type">ClientChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> session.createChannel(Channel.CHANNEL_SHELL)) {</span><br><span class="line">               channel.setOut(responseStream);</span><br><span class="line">               channel.setErr(errorResponseStream);</span><br><span class="line">               <span class="hljs-keyword">try</span> {</span><br><span class="line">                   channel.open().verify(defaultTimeoutSeconds, TimeUnit.SECONDS);</span><br><span class="line">                   <span class="hljs-keyword">try</span> (<span class="hljs-type">OutputStream</span> <span class="hljs-variable">pipedIn</span> <span class="hljs-operator">=</span> channel.getInvertedIn()) {</span><br><span class="line">                       pipedIn.write(command.getBytes());</span><br><span class="line">                       pipedIn.flush();</span><br><span class="line">                   }</span><br><span class="line">                   channel.waitFor(EnumSet.of(ClientChannelEvent.CLOSED), TimeUnit.SECONDS.toMillis(defaultTimeoutSeconds));</span><br><span class="line">                   <span class="hljs-type">String</span> <span class="hljs-variable">errorString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">String</span>(errorResponseStream.toByteArray());</span><br><span class="line">                   <span class="hljs-keyword">if</span> (!errorString.isEmpty()) {</span><br><span class="line">                       log.warn(errorString);</span><br><span class="line">                   }</span><br><span class="line">                   <span class="hljs-type">String</span> <span class="hljs-variable">responseString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">String</span>(responseStream.toByteArray());</span><br><span class="line">                   <span class="hljs-keyword">if</span> (!responseString.isEmpty()) {</span><br><span class="line">                       log.info(responseString);</span><br><span class="line">                   }</span><br><span class="line">               } <span class="hljs-keyword">finally</span> {</span><br><span class="line">                   channel.close(<span class="hljs-literal">false</span>);</span><br><span class="line">               }</span><br><span class="line">           }</span><br><span class="line">       } <span class="hljs-keyword">finally</span> {</span><br><span class="line">           client.stop();</span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>与往常一样，本文中使用的源代码可<a href="https://github.com/ReLive27/Java/tree/master/security/src/main/java/com/relive/ssh">在 GitHub 上</a>获得。</p></body></html>]]></content>
    
    
    <summary type="html">&lt;!--ssh--&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="java" scheme="https://relive27.github.io/categories/java/"/>
    
    
    <category term="ssh" scheme="https://relive27.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-单例模式</title>
    <link href="https://relive27.github.io/2022/05/11/singleton-pattern/"/>
    <id>https://relive27.github.io/2022/05/11/singleton-pattern/</id>
    <published>2022-05-11T12:26:19.000Z</published>
    <updated>2022-06-14T04:33:40.925Z</updated>
    
    <content type="html"><![CDATA[<!--singleton--><html><head></head><body><span id="more"></span><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式是设计模式中比较简单的模式，也是很常用的模式，其定义如下：</p><p><strong>确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例</strong>。</p><p>通用类图如下：</p><p><img src="/2022/05/11/singleton-pattern/C46A72CE-5EA4-4A94-89F0-BE215780E639.jpeg"></p><p>通过私有化构造函数确保在一个应用中只有一个实例，并提供静态方法发布对象。</p><p>单例模式通用代码（也被称为饿汉式）：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line">  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton singleton= <span class="hljs-keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">  <span class="hljs-comment">//限制多个对象</span></span><br><span class="line">  <span class="hljs-keyword">private</span> <span class="title function_">Singleton</span> <span class="hljs-params">()</span>{}</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-comment">//通过该方法获得实例对象</span></span><br><span class="line">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="title function_">getSingleton</span><span class="hljs-params">()</span> {</span><br><span class="line">    <span class="hljs-keyword">return</span> singleton;</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-comment">//在类中其他方法，尽量是static</span></span><br><span class="line">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="title function_">doSomething</span><span class="hljs-params">()</span>{</span><br><span class="line">    ...</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="单例模式的优点"><a href="#单例模式的优点" class="headerlink" title="单例模式的优点"></a>单例模式的优点</h3><ul><li>减少内存开支，特别是一个对象频繁的创建和销毁时。</li><li>减少系统性能开销，当一个对象的产生需要比较多的资源时，可以通过启动时产生一个单例对象。</li><li>单例模式可以避免对资产的多重占用。</li><li>单例模式可以在系统设置全局的访问点，优化和共享资源访问。</li></ul><h3 id="单例模式的缺点"><a href="#单例模式的缺点" class="headerlink" title="单例模式的缺点"></a>单例模式的缺点</h3><ul><li>单例模式对测试不利，在并行开发中，如果单例模式没有完成，是不能进行测试的，因为没有接口也不能mock的方式虚拟一个对象</li><li>单例模式与单一职责原则有冲突，一个类应该只实现一个逻辑，单例模式把“要单例”和业务逻辑合在一个类中</li></ul><h3 id="单例模式使用场景"><a href="#单例模式使用场景" class="headerlink" title="单例模式使用场景"></a>单例模式使用场景</h3><p>系统中要求一个类只有一个对象，当存在多个对象时会产生错误影响，可以使用单例模式。</p><ul><li>要求生成唯一序列号的环境</li><li>在项目中需要一个共享访问点和共享数据</li><li>创建一个对象需要消耗很多资源。</li><li>需要定义大量的静态常量和静态方法（如工具类）</li></ul><h3 id="单例模式的注意事项"><a href="#单例模式的注意事项" class="headerlink" title="单例模式的注意事项"></a>单例模式的注意事项</h3><p>在高并发情况下，单例模式存在线程同步问题，如下面的一种单例模式实现方式（也称为懒汉式）：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line">  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">singleton</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-comment">//限制产生多个对象</span></span><br><span class="line">  <span class="hljs-keyword">private</span> <span class="title function_">Singleton</span><span class="hljs-params">()</span>{}</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="title function_">getSingleton</span><span class="hljs-params">()</span> {</span><br><span class="line">    <span class="hljs-keyword">if</span>(singleton == <span class="hljs-literal">null</span>){</span><br><span class="line">      singleton = <span class="hljs-keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> singleton;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在并发量增加时可能会出现多个实例，如一个线程A执行到singleton = new Singleton()，但是还没有获得对象，第二个线程B也在执行，执行到singleton == null判断，判断条件为真，于是运行下去也创建了一个对象。</p><p>解决线程不安全问题方法有很多，一使用饿汉式的实现方式，静态变量在类加载时初始化，类加载过程是线程安全的，所以饿汉式没有线程安全问题；二是使用Java的锁机制，以下代码示例单例模式（懒汉式）的双重检锁机制：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line">  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">singleton</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-comment">//限制产生多个对象</span></span><br><span class="line">  <span class="hljs-keyword">private</span> <span class="title function_">Singleton</span><span class="hljs-params">()</span>{}</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="title function_">getSingleton</span><span class="hljs-params">()</span> {</span><br><span class="line">        <span class="hljs-keyword">if</span> (singleton == <span class="hljs-literal">null</span>) {</span><br><span class="line">            <span class="hljs-keyword">synchronized</span> (Singleton.class) {</span><br><span class="line">                <span class="hljs-keyword">if</span> (singleton == <span class="hljs-literal">null</span>) {</span><br><span class="line">                    singleton = <span class="hljs-keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">      <span class="hljs-keyword">return</span> singleton;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>总之单例模式比较简单而且应用非常广泛，在Spring框架中每个Bean默认就是单例的。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>与往常一样，本文中使用的源代码可<a href="https://github.com/ReLive27/Java/tree/master/designPatterns/src/main/java/com/relive/singleton">在 GitHub 上</a>获得。</p></body></html>]]></content>
    
    
    <summary type="html">&lt;!--singleton--&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://relive27.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot启动完成前后执行某个方法</title>
    <link href="https://relive27.github.io/2022/05/10/spring-start-event/"/>
    <id>https://relive27.github.io/2022/05/10/spring-start-event/</id>
    <published>2022-05-10T13:10:10.000Z</published>
    <updated>2022-06-21T08:01:57.510Z</updated>
    
    <content type="html"><![CDATA[<!-- springboot --><html><head></head><body><span id="more"></span><p>在项目启动完成之前</p><p>实现ApplicationListener<contextrefreshedevent>，ContextRefreshedEvent为启动事件。</contextrefreshedevent></p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">ApplicationListenerDemo</span> <span class="hljs-keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ContextRefreshedEvent&gt; {</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="hljs-params">(ContextRefreshedEvent contextRefreshedEvent)</span> {</span><br><span class="line">        System.out.println(<span class="hljs-string">"applicationListener before server success"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="在项目启动完成之后"><a href="#在项目启动完成之后" class="headerlink" title="在项目启动完成之后"></a>在项目启动完成之后</h4><h5 id="方式一-：实现ApplicationRunner接口"><a href="#方式一-：实现ApplicationRunner接口" class="headerlink" title="方式一 ：实现ApplicationRunner接口"></a>方式一 ：实现ApplicationRunner接口</h5><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">ApplicationRunnerDemo</span> <span class="hljs-keyword">implements</span> <span class="title class_">ApplicationRunner</span> {</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="title function_">run</span><span class="hljs-params">(ApplicationArguments args)</span> <span class="hljs-keyword">throws</span> Exception {</span><br><span class="line">        System.out.println(<span class="hljs-string">"run after server success"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="方式二：实现CommandLineRunner接口"><a href="#方式二：实现CommandLineRunner接口" class="headerlink" title="方式二：实现CommandLineRunner接口"></a>方式二：实现CommandLineRunner接口</h5><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">CommandLineRunnerDemo</span> <span class="hljs-keyword">implements</span> <span class="title class_">CommandLineRunner</span> {</span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception {</span><br><span class="line">        System.out.println(<span class="hljs-string">"commandLineRunner after server success"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>启动类的run方法调用了callRunners方法</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="hljs-params">(String... args)</span> {</span><br><span class="line">        <span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">        stopWatch.start();</span><br><span class="line">        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;</span><br><span class="line">        Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="hljs-keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="hljs-built_in">this</span>.configureHeadlessProperty();</span><br><span class="line">        <span class="hljs-type">SpringApplicationRunListeners</span> <span class="hljs-variable">listeners</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getRunListeners(args);</span><br><span class="line">        listeners.starting();</span><br><span class="line"></span><br><span class="line">        Collection exceptionReporters;</span><br><span class="line">        <span class="hljs-keyword">try</span> {</span><br><span class="line">            <span class="hljs-type">ApplicationArguments</span> <span class="hljs-variable">applicationArguments</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">DefaultApplicationArguments</span>(args);</span><br><span class="line">            <span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">            <span class="hljs-built_in">this</span>.configureIgnoreBeanInfo(environment);</span><br><span class="line">            <span class="hljs-type">Banner</span> <span class="hljs-variable">printedBanner</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.printBanner(environment);</span><br><span class="line">            context = <span class="hljs-built_in">this</span>.createApplicationContext();</span><br><span class="line">            exceptionReporters = <span class="hljs-built_in">this</span>.getSpringFactoriesInstances(SpringBootExceptionReporter.class, <span class="hljs-keyword">new</span> <span class="title class_">Class</span>[]{ConfigurableApplicationContext.class}, context);</span><br><span class="line">            <span class="hljs-built_in">this</span>.prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">            <span class="hljs-built_in">this</span>.refreshContext(context);</span><br><span class="line">            <span class="hljs-built_in">this</span>.afterRefresh(context, applicationArguments);</span><br><span class="line">            stopWatch.stop();</span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logStartupInfo) {</span><br><span class="line">                (<span class="hljs-keyword">new</span> <span class="title class_">StartupInfoLogger</span>(<span class="hljs-built_in">this</span>.mainApplicationClass)).logStarted(<span class="hljs-built_in">this</span>.getApplicationLog(), stopWatch);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            listeners.started(context);</span><br><span class="line">          <span class="hljs-comment">//执行callRunners方法</span></span><br><span class="line">            <span class="hljs-built_in">this</span>.callRunners(context, applicationArguments);</span><br><span class="line">        } <span class="hljs-keyword">catch</span> (Throwable var10) {</span><br><span class="line">            <span class="hljs-built_in">this</span>.handleRunFailure(context, var10, exceptionReporters, listeners);</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="title class_">IllegalStateException</span>(var10);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">try</span> {</span><br><span class="line">            listeners.running(context);</span><br><span class="line">            <span class="hljs-keyword">return</span> context;</span><br><span class="line">        } <span class="hljs-keyword">catch</span> (Throwable var9) {</span><br><span class="line">            <span class="hljs-built_in">this</span>.handleRunFailure(context, var9, exceptionReporters, (SpringApplicationRunListeners)<span class="hljs-literal">null</span>);</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="title class_">IllegalStateException</span>(var9);</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>callRunners方法会调用容器里所有实现了ApplicationRunner、CommandLineRunner接口的方法</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="title function_">callRunners</span><span class="hljs-params">(ApplicationContext context, ApplicationArguments args)</span> {</span><br><span class="line">        List&lt;Object&gt; runners = <span class="hljs-keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());</span><br><span class="line">        runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());</span><br><span class="line">        AnnotationAwareOrderComparator.sort(runners);</span><br><span class="line">        <span class="hljs-type">Iterator</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="title class_">LinkedHashSet</span>(runners)).iterator();</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">while</span>(var4.hasNext()) {</span><br><span class="line">            <span class="hljs-type">Object</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> var4.next();</span><br><span class="line">            <span class="hljs-keyword">if</span> (runner <span class="hljs-keyword">instanceof</span> ApplicationRunner) {</span><br><span class="line">                <span class="hljs-built_in">this</span>.callRunner((ApplicationRunner)runner, args);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> (runner <span class="hljs-keyword">instanceof</span> CommandLineRunner) {</span><br><span class="line">                <span class="hljs-built_in">this</span>.callRunner((CommandLineRunner)runner, args);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    
    <summary type="html">&lt;!-- springboot --&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="https://relive27.github.io/categories/SpringBoot/"/>
    
    
    <category term="spring boot" scheme="https://relive27.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合redis</title>
    <link href="https://relive27.github.io/2022/05/10/springboot-integrate-redis/"/>
    <id>https://relive27.github.io/2022/05/10/springboot-integrate-redis/</id>
    <published>2022-05-10T12:23:20.000Z</published>
    <updated>2022-06-21T08:01:30.222Z</updated>
    
    <content type="html"><![CDATA[<!--redis--><html><head></head><body><span id="more"></span><p><img src="/2022/05/10/springboot-integrate-redis/springRedis.png"></p><h2 id="Redis介绍"><a href="#Redis介绍" class="headerlink" title="Redis介绍"></a>Redis介绍</h2><p>Redis是当前比较热门的NOSQL系统之一，它是一个开源的使用ANSI c语言编写的key-value存储系统（区别于MySQL的二维表格的形式存储。）。和Memcache类似，但很大程度补偿了Memcache的不足。和Memcache一样，Redis数据都是缓存在计算机内存中，不同的是，Memcache只能将数据缓存到内存中，无法自动定期写入硬盘，这就表示，一断电或重启，内存清空，数据丢失。所以Memcache的应用场景适用于缓存无需持久化的数据。而Redis不同的是它会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，实现数据的持久化。</p><p>Redis的特点：</p><ul><li><p>Redis读取的速度是110000次/s，写的速度是81000次/s；</p></li><li><p>原子 。Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。</p></li><li><p>支持多种数据结构：string（字符串）；list（列表）；hash（哈希），set（集合）；zset(有序集合)</p></li><li><p>持久化，集群部署</p></li><li><p>支持过期时间，支持事务，消息订阅</p></li></ul><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>springboot版本使用的是2.3.0</p><figure class="highlight xml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><figure class="highlight yaml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">spring:</span></span><br><span class="line">  <span class="hljs-attr">redis:</span></span><br><span class="line">    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.234</span><span class="hljs-number">.131</span> <span class="hljs-comment">#Redis服务器地址</span></span><br><span class="line">    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><span class="hljs-comment">#Redis数据库索引（默认为0）</span></span><br><span class="line">    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><span class="hljs-comment">#Redis服务器连接端口</span></span><br><span class="line">    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><span class="hljs-comment">#Redis服务器连接密码（默认为空）</span></span><br><span class="line">    <span class="hljs-attr">timeout:</span> <span class="hljs-number">180000</span><span class="hljs-comment">#连接超时时间（毫秒）</span></span><br><span class="line">    <span class="hljs-attr">lettuce:</span></span><br><span class="line">      <span class="hljs-attr">pool:</span></span><br><span class="line">        <span class="hljs-attr">max-active:</span> <span class="hljs-number">20</span><span class="hljs-comment">#连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line">        <span class="hljs-attr">max-wait:</span> <span class="hljs-number">10000</span><span class="hljs-comment">#连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">5</span><span class="hljs-comment">#连接池中的最大空闲连接</span></span><br><span class="line">        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><span class="hljs-comment">#连接池中的最小空闲连接</span></span><br><span class="line">      <span class="hljs-attr">shutdown-timeout:</span> <span class="hljs-number">100</span><span class="hljs-comment">#关闭超时时间</span></span><br></pre></td></tr></tbody></table></figure><h2 id="添加redis配置类"><a href="#添加redis配置类" class="headerlink" title="添加redis配置类"></a>添加redis配置类</h2><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@EnableCaching</span></span><br><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">RedisConfig</span> <span class="hljs-keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> {</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> {</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="hljs-comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line">        <span class="hljs-comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="hljs-comment">//value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="hljs-keyword">return</span> template;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Bean</span></span><br><span class="line">    <span class="hljs-keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="hljs-params">(RedisConnectionFactory factory)</span> {</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="hljs-comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="hljs-comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        <span class="hljs-type">RedisCacheConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="hljs-number">600</span>))</span><br><span class="line">              .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        <span class="hljs-type">RedisCacheManager</span> <span class="hljs-variable">cacheManager</span> <span class="hljs-operator">=</span> RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="hljs-keyword">return</span> cacheManager;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="SpringBoot缓存注解"><a href="#SpringBoot缓存注解" class="headerlink" title="SpringBoot缓存注解"></a>SpringBoot缓存注解</h2><p><strong>@EnableCaching</strong><br>开启基于注解的缓存</p><p><strong>缓存@Cacheable</strong><br>根据方法对其返回结果进行缓存，下次请求时，如果缓存存在，则直接读取缓存数据返回；如果缓存不存在，则执行方法，并把返回的结果存入缓存中。一般用在查询方法上。属性值如下：</p><table><thead><tr><th align="left">属性名</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">value</td><td align="left">缓存名，必填，它指定了你的缓存存放在哪块命名空间</td></tr><tr><td align="left">cacheNames</td><td align="left">与 value 差不多，二选一即可</td></tr><tr><td align="left">key</td><td align="left">缓存的 key，可以为空，如果指定要按照 <strong>SpEL</strong> 表达 式编写，如果不指定，则缺省按照方法的所有参数进行组合</td></tr><tr><td align="left">keyGenerator</td><td align="left">缓存数据时key生成策略，与key属性互斥</td></tr><tr><td align="left">cacheManager</td><td align="left">指定自定义CacheManager的名称，与cacheResolver属性互斥</td></tr><tr><td align="left">cacheResolver</td><td align="left">指定自定义的CacheResolver名称</td></tr><tr><td align="left">condition</td><td align="left">缓存的条件，可以为空，表示方法结果始终被缓存。而使用 <strong>SpEL</strong> 编写，返回 true 或者 false，只有为 true 才进行缓存/清除缓存，在<strong>调用方法之前之后</strong>都能判断</td></tr><tr><td align="left">unless</td><td align="left">用于否决缓存的，不像condition，该表达式只在<strong>方法执行之后</strong>判断，此时可以拿到返回值result进行判 断。条件为true不会缓存，fasle才缓存</td></tr><tr><td align="left">sync</td><td align="left">是否同步，默认是false，如果为true，unless将不受支持</td></tr></tbody></table><p><strong>@CachePut</strong><br>使用该注解标志的方法，每次都会执行，并将结果存入指定的缓存中。其他方法可以直接从响应的缓存中读取缓存数据，而不需要再去查询数据库。一般用在新增和更新方法上。属性值如下：</p><table><thead><tr><th align="left">属性名</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">value</td><td align="left">缓存名，必填，它指定了你的缓存存放在哪块命名空间</td></tr><tr><td align="left">cacheNames</td><td align="left">与 value 差不多，二选一即可</td></tr><tr><td align="left">key</td><td align="left">缓存的 key，可以为空，如果指定要按照 <strong>SpEL</strong> 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合</td></tr><tr><td align="left">keyGenerator</td><td align="left">缓存数据时key生成策略，与key属性互斥</td></tr><tr><td align="left">cacheManager</td><td align="left">指定自定义CacheManager的名称，与cacheResolver属性互斥</td></tr><tr><td align="left">cacheResolver</td><td align="left">指定自定义的CacheResolver名称</td></tr><tr><td align="left">condition</td><td align="left">缓存的条件，可以为空，表示方法结果始终被缓存。而使用<strong>SpEL</strong> 编写，返回 true 或者 false，只有为 true 才进行缓存/清除缓存，在<strong>调用方法之前之后</strong>都能判断</td></tr><tr><td align="left">unless</td><td align="left">用于否决缓存的，不像condition，该表达式只在<strong>方法执行之后</strong>判断，此时可以拿到返回值result进行判 断。条件为true不会缓存，fasle才缓存</td></tr></tbody></table><p><strong>@CacheEvict</strong><br>使用该注解标志的方法，会清空指定的缓存。一般用在更新或者删除方法上，属性值如下：</p><table><thead><tr><th align="left">属性名</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">value</td><td align="left">缓存名，必填，它指定了你的缓存存放在哪块命名空间</td></tr><tr><td align="left">cacheNames</td><td align="left">与 value 差不多，二选一即可</td></tr><tr><td align="left">key</td><td align="left">缓存的 key，可以为空，如果指定要按照 <strong>SpEL</strong> 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合</td></tr><tr><td align="left">keyGenerator</td><td align="left">缓存数据时key生成策略，与key属性互斥</td></tr><tr><td align="left">cacheManager</td><td align="left">指定自定义CacheManager的名称，与cacheResolver属性互斥</td></tr><tr><td align="left">cacheResolver</td><td align="left">指定自定义的CacheResolver名称</td></tr><tr><td align="left">condition</td><td align="left">缓存的条件，可以为空，表示方法结果始终被缓存。而使用 <strong>SpEL</strong> 编写，返回 true 或者 false，只有为 true 才进行缓存/清除缓存，在<strong>调用方法之前之后</strong>都能判断</td></tr><tr><td align="left">allEntries</td><td align="left">是否清空所有缓存内容，缺省为 false。如果指定为 true，则方法调用后将立即清空所有缓存。<br><strong>注意不允许将此参数设置为true并指定一个key</strong></td></tr><tr><td align="left">beforeInvocation</td><td align="left">是否在方法执行前就清空，缺省为 false。缺省情况下，如果方法执行<strong>抛出异常</strong>，则不会清空缓存。如果指定 为 true，则在方法还没有执行的时候就清空缓存。</td></tr></tbody></table><p><strong>@Caching</strong><br>不同或相同类型的缓存注释的组注释，用于定制复杂的缓存规则。</p><table><thead><tr><th align="left">属性名</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">cacheable</td><td align="left">默认为空，可以定义一个或多个@Cacheable</td></tr><tr><td align="left">put</td><td align="left">默认为空，可以定义一个或多个@CachePut</td></tr><tr><td align="left">evict</td><td align="left">默认为空，可以定义一个或多个@CacheEvict</td></tr></tbody></table><p><strong>@CacheConfig</strong><br>用于标注在类上，可以存放该类中所有缓存的公有属性，比如设置缓存的名字。</p><table><thead><tr><th align="left">属性名</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">cacheNames</td><td align="left">与 value 差不多，二选一即可</td></tr><tr><td align="left">keyGenerator</td><td align="left">缓存数据时key生成策略，与key属性互斥</td></tr><tr><td align="left">cacheManager</td><td align="left">指定自定义CacheManager的名称，如果没有设置cacheResolver，并且在类中的缓存注解未设置缓存解析器和缓存管理器，则使用该管理器而不是默认值。</td></tr><tr><td align="left">cacheResolver</td><td align="left">指定自定义CacheResolver的名称，如果在类中的缓存注解没有设置解析器和缓存管理器，则使用此解析器而不是默认值。</td></tr></tbody></table><h3 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h3><table><thead><tr><th align="left">名字</th><th align="left">位置</th><th align="left">描述</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">methodName</td><td align="left">root object</td><td align="left">当前被调用的方法名</td><td align="left">#root.methodName</td></tr><tr><td align="left">method</td><td align="left">root object</td><td align="left">当前被调用的方法</td><td align="left">#root.method.name</td></tr><tr><td align="left">target</td><td align="left">root object</td><td align="left">当前被调用的目标对象</td><td align="left">#root.target</td></tr><tr><td align="left">targetClass</td><td align="left">root object</td><td align="left">当前被调用的目标对象类</td><td align="left">#root.targetClass</td></tr><tr><td align="left">args</td><td align="left">root object</td><td align="left">当前被调用的方法的参数列表</td><td align="left">#root.args[0] 表示参数列表第一个参数</td></tr><tr><td align="left">caches</td><td align="left">root object</td><td align="left">当前方法调用使用的缓存列表（如@Cacheable(value={“cache1”, “cache2”})），<br>则有两个cache</td><td align="left">#root.caches[0].name，取缓存列<br>表中第一个缓存名称</td></tr><tr><td align="left">argument name</td><td align="left">evaluation context(上下文)</td><td align="left">方法参数的名字. 可以直接 #参数名 ，也可以使用 #p0或#a0 的 形式，0代表参数的索引；</td><td align="left">#id、#p0,#a0</td></tr><tr><td align="left">result</td><td align="left">evaluation context</td><td align="left">方法执行后的返回值（仅当方法执行之后的判断有效，如 ‘unless’，’cache put’的表达式 ’cache evict’的属性beforeInvocation=false</td><td align="left">#result，#result.id(返回结果的属性名)</td></tr></tbody></table><h2 id="使用RestTemplate操作redis"><a href="#使用RestTemplate操作redis" class="headerlink" title="使用RestTemplate操作redis"></a>使用RestTemplate操作redis</h2><p>1.redisTemplate.opsForValue();//操作字符串 </p><p>2.redisTemplate.opsForHash();//操作hash </p><p>3.redisTemplate.opsForList();//操作list </p><p>4.redisTemplate.opsForSet();//操作set </p><p>5.redisTemplate.opsForZSet();//操作有序set </p><p>其他操作不一一列举</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>首先我们先编写一个小Demo，我持久化层使用的是mybatis,这里代码很简单，就直接越过。</p><p><img src="https://img-blog.csdnimg.cn/20200920212145547.png#pic_left"><br>然后看一下我们service层代码，在方法上添加了@Cacheable注解</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Service</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">DepartmentService</span> {</span><br><span class="line">    <span class="hljs-meta">@Autowired</span></span><br><span class="line">    <span class="hljs-keyword">private</span> DepartmentMapper departmentMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Cacheable(cacheNames = "dep",key = "#id")</span></span><br><span class="line">    <span class="hljs-keyword">public</span> Department <span class="title function_">getDep</span><span class="hljs-params">(Integer id)</span>{</span><br><span class="line">        <span class="hljs-type">Department</span> <span class="hljs-variable">byId</span> <span class="hljs-operator">=</span> departmentMapper.getById(id);</span><br><span class="line">        <span class="hljs-keyword">return</span> byId;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>编写测试方法，看打印的日志结果</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Test</span></span><br><span class="line">   <span class="hljs-keyword">void</span> <span class="title function_">contextLoads</span><span class="hljs-params">()</span> {</span><br><span class="line">       <span class="hljs-type">Department</span> <span class="hljs-variable">dep</span> <span class="hljs-operator">=</span> departmentService.getDep(<span class="hljs-number">1</span>);</span><br><span class="line">       System.out.println(dep);</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>第一次执行从数据库里查数据，日志打印出SQL语句<br><img src="https://img-blog.csdnimg.cn/20200920212903368.png#pic_left"><br>第二次执行，日志没有打印SQL语句，说明是从redis缓存取数据<br><img src="https://img-blog.csdnimg.cn/20200920213756625.png?t_70#pic_left"><br>而我们也可以打开Redis Desktop Manager查看，数据的确存进缓存中了<br><img src="https://img-blog.csdnimg.cn/20200920213949479.png?t_70#pic_left"></p></body></html>]]></content>
    
    
    <summary type="html">&lt;!--redis--&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="https://relive27.github.io/categories/SpringBoot/"/>
    
    
    <category term="spring boot" scheme="https://relive27.github.io/tags/spring-boot/"/>
    
    <category term="redis" scheme="https://relive27.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Spring项目的resources目录下的文件读取</title>
    <link href="https://relive27.github.io/2022/05/09/spring-read-resource/"/>
    <id>https://relive27.github.io/2022/05/09/spring-read-resource/</id>
    <published>2022-05-09T12:50:16.000Z</published>
    <updated>2022-06-21T08:02:21.814Z</updated>
    
    <content type="html"><![CDATA[<!-- SpringBoot --><html><head></head><body><span id="more"></span><h3 id="src-x2F-main-x2F-resources和src-x2F-test-x2F-resources下的资源读取方式"><a href="#src-x2F-main-x2F-resources和src-x2F-test-x2F-resources下的资源读取方式" class="headerlink" title="src/main/resources和src/test/resources下的资源读取方式"></a>src/main/resources和src/test/resources下的资源读取方式</h3><p><strong>1.</strong> 一般maven会将spring工程编译到target文件夹下，/target/classes就是其根目录。而src/main/resources下的文件被复制到了这个classes文件夹下。</p><p><strong>2.</strong> maven会将src/test/java文件夹下的代码编译到target/test-classes文件夹下。同样的，如果src/test/resources下有资源文件的话，就复制到target/test-classes文件夹下。</p><p>测试代码运行时，优先使用test-classes文件夹下的资源文件，如果不存在，再使用classes文件夹下的资源文件。</p><p><strong>前两种底层代码都是通过类加载器读取流</strong> </p><p><strong>1.</strong> 使用<strong>org.springframework.core.io.ClassPathResource</strong>读取，开发环境和生产环境(Linux下jar包运行读取)都能读取。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Resource resource=<span class="hljs-keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="hljs-string">"3.png"</span>);</span><br><span class="line"><span class="hljs-type">InputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> resource.getInputStream();</span><br><span class="line">OutputStream fos=<span class="hljs-keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="hljs-string">"E://3.png"</span>);</span><br><span class="line"><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-type">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="title class_">byte</span>[<span class="hljs-number">1024</span>];</span><br><span class="line"><span class="hljs-keyword">while</span>((len=fis.read(buf,<span class="hljs-number">0</span>,buf.length))!=-<span class="hljs-number">1</span>){</span><br><span class="line">    fos.write(buf,<span class="hljs-number">0</span>,len);</span><br><span class="line">}</span><br><span class="line">fos.close();</span><br><span class="line">fis.close();</span><br></pre></td></tr></tbody></table></figure><p><strong>2.</strong> 使用流的方式来读取，两种方式，开发环境和生产环境(Linux下jar包运行读取)都能读取。</p><p>方式一：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-type">InputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getResourceAsStream(<span class="hljs-string">"/3.png"</span>);</span><br><span class="line">OutputStream fos=<span class="hljs-keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="hljs-string">"E://3.png"</span>);</span><br><span class="line"><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-type">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="title class_">byte</span>[<span class="hljs-number">1024</span>];</span><br><span class="line"><span class="hljs-keyword">while</span>((len=fis.read(buf,<span class="hljs-number">0</span>,buf.length))!=-<span class="hljs-number">1</span>){</span><br><span class="line">    fos.write(buf,<span class="hljs-number">0</span>,len);</span><br><span class="line">}</span><br><span class="line">fos.close();</span><br><span class="line">fis.close();</span><br></pre></td></tr></tbody></table></figure><p>方式二：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-type">InputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader().getResourceAsStream(<span class="hljs-string">"/3.png"</span>);</span><br><span class="line">OutputStream fos=<span class="hljs-keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="hljs-string">"E://3.png"</span>);</span><br><span class="line"><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-type">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="title class_">byte</span>[<span class="hljs-number">1024</span>];</span><br><span class="line"><span class="hljs-keyword">while</span>((len=fis.read(buf,<span class="hljs-number">0</span>,buf.length))!=-<span class="hljs-number">1</span>){</span><br><span class="line">    fos.write(buf,<span class="hljs-number">0</span>,len);</span><br><span class="line">}</span><br><span class="line">fos.close();</span><br><span class="line">fis.close();</span><br></pre></td></tr></tbody></table></figure><p><strong>3.</strong> 使用<strong>org.springframework.core.io.ResourceLoader</strong> 读取，开发环境和生产环境(Linux下jar包运行读取)都能读取。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Autowired</span></span><br><span class="line">ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Test</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="title function_">resourceLoaderTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException {</span><br><span class="line">    <span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> resourceLoader.getResource(<span class="hljs-string">"classpath:3.png"</span>);</span><br><span class="line">    <span class="hljs-type">InputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> resource.getInputStream();</span><br><span class="line">    OutputStream fos=<span class="hljs-keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="hljs-string">"E://3.png"</span>);</span><br><span class="line">    <span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-type">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="title class_">byte</span>[<span class="hljs-number">1024</span>];</span><br><span class="line">    <span class="hljs-keyword">while</span>((len=fis.read(buf,<span class="hljs-number">0</span>,buf.length))!=-<span class="hljs-number">1</span>){</span><br><span class="line">        fos.write(buf,<span class="hljs-number">0</span>,len);</span><br><span class="line">    }</span><br><span class="line">    fos.close();</span><br><span class="line">    fis.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>4.</strong> 使用<strong>File file=new File(“src/main/resources/file.txt”);</strong> 读取，只能在开发环境中读取，不能再生产环境中读取(Linux下jar包运行读取)。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">File file=<span class="hljs-keyword">new</span> <span class="title class_">File</span>(<span class="hljs-string">"src/main/resources/3.png"</span>);</span><br><span class="line">InputStream fis=<span class="hljs-keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">OutputStream fos=<span class="hljs-keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="hljs-string">"E://3.png"</span>);</span><br><span class="line"><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-type">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="title class_">byte</span>[<span class="hljs-number">1024</span>];</span><br><span class="line"><span class="hljs-keyword">while</span> ((len=fis.read(buf,<span class="hljs-number">0</span>,buf.length))!=-<span class="hljs-number">1</span>){</span><br><span class="line">  fos.write(buf,<span class="hljs-number">0</span>,len);</span><br><span class="line">  System.out.println(<span class="hljs-string">"---"</span>);</span><br><span class="line">}</span><br><span class="line">fos.close();</span><br><span class="line">fis.close();</span><br></pre></td></tr></tbody></table></figure><p><strong>5.</strong> 使用<strong>org.springframework.util.ResourceUtils</strong> 读取，只能在开发环境中读取，不能再生产环境中读取(Linux下jar包运行读取)。</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> ResourceUtils.getFile(<span class="hljs-string">"src/main/resources/3.png"</span>);</span><br><span class="line">InputStream fis=<span class="hljs-keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">OutputStream fos=<span class="hljs-keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="hljs-string">"E://3.png"</span>);</span><br><span class="line"><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-type">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="title class_">byte</span>[<span class="hljs-number">1024</span>];</span><br><span class="line"><span class="hljs-keyword">while</span>((len=fis.read(buf,<span class="hljs-number">0</span>,buf.length))!=-<span class="hljs-number">1</span>){</span><br><span class="line">    fos.write(buf,<span class="hljs-number">0</span>,len);</span><br><span class="line">}</span><br><span class="line">fos.close();</span><br><span class="line">fis.close();</span><br></pre></td></tr></tbody></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>与往常一样，本文中使用的源代码可<a href="https://github.com/ReLive27/spring-boot-sample/blob/master/spring-static-resource/src/main/java/com/relive/ResourceFileReader.java">在 GitHub 上</a>获得。</p></body></html>]]></content>
    
    
    <summary type="html">&lt;!-- SpringBoot --&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="https://relive27.github.io/categories/SpringBoot/"/>
    
    
    <category term="spring boot" scheme="https://relive27.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>注解@PathVariable、@RequestParam、@RequestBody、@RequestHeader讲解</title>
    <link href="https://relive27.github.io/2022/05/09/spring-mvc-annotation/"/>
    <id>https://relive27.github.io/2022/05/09/spring-mvc-annotation/</id>
    <published>2022-05-09T04:13:37.000Z</published>
    <updated>2022-06-21T08:02:38.522Z</updated>
    
    <content type="html"><![CDATA[<!-- SpringMVC --><html><head></head><body><span id="more"></span><h4 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h4><p>绑定请求参数，当@RequestMapping(value=”/get/{id}”），可以获取url格式/get/{id}中{id}的值</p><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">value</td><td align="left">指定request参数名</td></tr><tr><td align="left">name</td><td align="left">指定request参数名（与value二选一）</td></tr><tr><td align="left">required</td><td align="left">是否需要该参数。 默认为true，如果请求中缺少参数，则会引发<strong>异常</strong></td></tr></tbody></table><p>当url为 get/{id}/{name}</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@RequestMapping("/get/{id}/{name}")</span></span><br><span class="line"><span class="hljs-keyword">public</span> String <span class="title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id,<span class="hljs-meta">@PathVariable</span> String name)</span></span><br></pre></td></tr></tbody></table></figure><hr><p>当需要对url变量进行更加精确的定义时，可以定义正则表达式进行更精确地控制，定义语法是{变量名: 正则表达式}</p><figure class="highlight plaintext hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping("/get/{name:[a-zA-Z0-9]+}")</span><br><span class="line">public String get(@PathVariable String name)</span><br></pre></td></tr></tbody></table></figure><p>如此设置URL变量规则后，不合法的URL则不会被处理，直接由SpringMVC框架返回404NotFound。</p><h4 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h4><p>绑定来自请求url中的参数，可以获取url格式：?username=”zhangsan”。</p><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">value</td><td align="left">指定request参数名</td></tr><tr><td align="left">name</td><td align="left">指定request参数名（与value二选一）</td></tr><tr><td align="left">required</td><td align="left">是否需要该参数。 默认为true，如果请求中缺少参数，则会引发<strong>异常</strong></td></tr><tr><td align="left">defaultValue</td><td align="left">未提供request参数或具有空值时用作后备的默认值,当设置默认值时，required隐式的设为了false</td></tr></tbody></table><p>如果在传递参数时url是?userName=zhangsan&amp;userName=wangwu，即两个同名参数，后台可以用以下方法接收：</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> String <span class="title function_">getUserName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value="userName")</span> String []  userNames)</span></span><br><span class="line"><span class="hljs-comment">//或者是</span></span><br><span class="line"><span class="hljs-keyword">public</span> String <span class="title function_">getUserName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value="list")</span> List&lt;String&gt; list)</span>  </span><br></pre></td></tr></tbody></table></figure><h5 id="Get-x2F-POST请求测试"><a href="#Get-x2F-POST请求测试" class="headerlink" title="Get/POST请求测试"></a>Get/POST请求测试</h5><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> String <span class="title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Map map)</span></span><br><span class="line"><span class="hljs-comment">//在url中？后面添加参数可以接收</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> String <span class="title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String id)</span></span><br><span class="line"><span class="hljs-comment">//在url中？后面添加参数可以接收</span></span><br><span class="line">  </span><br><span class="line"><span class="hljs-keyword">public</span> String <span class="title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Object object)</span></span><br><span class="line"><span class="hljs-comment">//参数接收不到</span></span><br></pre></td></tr></tbody></table></figure><h4 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h4><p>绑定来自HTTP<strong>请求体</strong> 的参数</p><p><strong>@RequestBody用来处理 Content-Type 为 application/json、application/xml编码的内容</strong></p><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">required</td><td align="left">是否需要该参数。 默认为true，如果请求中缺少参数，则会引发<strong>异常</strong></td></tr></tbody></table><h5 id="GET-x2F-POST-请求测试"><a href="#GET-x2F-POST-请求测试" class="headerlink" title="GET/POST 请求测试"></a>GET/POST 请求测试</h5><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> String <span class="title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Map map)</span></span><br><span class="line"><span class="hljs-comment">//json参数可以接收</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> String <span class="title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String id)</span></span><br><span class="line"><span class="hljs-comment">//json参数可以接收,但是字符串接收的是整个json格式的字符串,如打印：{"id":3,"name":"ddd"}</span></span><br><span class="line">  </span><br><span class="line"><span class="hljs-keyword">public</span> String <span class="title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Object object)</span></span><br><span class="line"><span class="hljs-comment">//json参数可以接收</span></span><br></pre></td></tr></tbody></table></figure><p>指定实体类中的属性对应json中的key值@JsonProperty、@JsonAlias</p><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Data</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="title class_">Employee</span> {</span><br><span class="line">    <span class="hljs-meta">@JsonProperty(value = "ids")</span> <span class="hljs-comment">//json中的key为ids可以识别，key为id不能识别</span></span><br><span class="line">    <span class="hljs-keyword">private</span> String id;</span><br><span class="line">    <span class="hljs-meta">@JsonAlias(value = {"NAME","ii"})</span> <span class="hljs-comment">//json中的key为NAME、ii、name都能识别</span></span><br><span class="line">    <span class="hljs-keyword">private</span> String name;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h4><p>从Http请求头中提取指定的某个请求头。</p><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">value</td><td align="left">指定请求头中的key</td></tr><tr><td align="left">name</td><td align="left">指定请求头中的key（与value二选一）</td></tr><tr><td align="left">required</td><td align="left">是否需要该参数。 默认为true，如果请求中缺少参数，则会引发<strong>异常</strong></td></tr><tr><td align="left">defaultValue</td><td align="left">未提供request参数或具有空值时用作后备的默认值,当设置默认值时，required隐式的设为了false</td></tr></tbody></table><figure class="highlight java hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> String <span class="title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(value = "Content-Type")</span> String contextType)</span>{}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    
    <summary type="html">&lt;!-- SpringMVC --&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="https://relive27.github.io/categories/SpringBoot/"/>
    
    
    <category term="spring mvc" scheme="https://relive27.github.io/tags/spring-mvc/"/>
    
  </entry>
  
</feed>
